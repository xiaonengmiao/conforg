#+TITLE: A monolithic configuration file in org-mode
#+AUTHOR: Xiaoyu Wei
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* Getting started
  Config files for emacs, neovim, bash and more,
  organized in a single [[http://orgmode.org][Org mode]] file.
  Inspired by [[https://github.com/larstvei/dot-emacs][larstvei/dot-emacs]].

  To get started, first download the file
  #+BEGIN_SRC sh :tangle no
    wget https://raw.githubusercontent.com/xywei/conforg/master/conf.org
  #+END_SRC

  *Make your backups.*

  Then run the scrip to tangle. You need Emacs and Org-mode, of course.
  #+BEGIN_SRC sh :tangle no
    emacs -Q --batch --eval '(require (quote org))' \
                     --eval '(org-babel-tangle-file "conf.org")'
  #+END_SRC

  The process generates and installs the dot files for the included programs.
  Note that it will overwrite all the concerned files, so make sure to backup
  your own stuff first.

  To finish the setup for an individual program, see the corresponding
  section for more information.
  (Tip: search for MANUALLY in all caps to find those places).


* Meta-configurations
  First of all, set some global options to help setting things up.
  The meta-configurations are set via noweb references.
  
** Conforg directory:
   #+NAME: conforg-dir
   #+BEGIN_SRC sh :results output :exports none :tangle no
     $HOME/.conforg
   #+END_SRC

** Conda directory: 
   Root directory of Anaconda/Miniconda installation
   #+NAME: conda-dir
   #+BEGIN_SRC sh :results output :exports none :tangle no
     $HOME/miniconda3
   #+END_SRC

** Cli-utils directory:
   Directory of my scripts
   #+NAME: cli-utils-dir
   #+BEGIN_SRC sh :results output :exports none :tangle no
     $HOME/cli-utils
   #+END_SRC


* Configurations
** Emacs
*** Header
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; DO NOT EDIT
      ;; This file is generated by conf.org from xywei/conforg,
      ;; all changes will be overwritten.

      (package-initialize)
    #+END_SRC

*** Native configs
    Configs in here should overrides all the others if there are conflicts,
    which is done using after-init-hook
**** Recent files
     Build a list of recently opened files and access by C-x C-r
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
	 (progn
	   (recentf-mode 1)
	   (setq recentf-max-menu-items 25)
	   (run-at-time nil (* 5 60) 'recentf-save-list)
	   (global-set-key "\C-x\ \C-r" 'recentf-open-files))))
     #+END_SRC

**** Larger workspace
     Remove scroll bars, menu bars, and toolbars to make more space
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
           (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
           (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
           (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
         )
       ))
     #+END_SRC

**** Window navigation
     Wind-move (vim-like)
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
           (global-set-key (kbd "C-c h") 'windmove-left)
           (global-set-key (kbd "C-c j") 'windmove-down)
           (global-set-key (kbd "C-c k") 'windmove-up)
           (global-set-key (kbd "C-c l") 'windmove-right)
         )
       ))
     #+END_SRC
**** Smoothen some places
     Make frame to be able to resize to full height
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq frame-resize-pixelwise t)
         )
       ))
     #+END_SRC

     Disable automatic horizontal scrolling, which causes abrupt jumps.
     Use C-x < and C-x > to do it manually.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq auto-hscroll-mode nil)
           )
         ))
     #+END_SRC

**** Split window
     Vertical split by default
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq split-height-threshold nil)
           (setq split-width-threshold 80)
         )
       ))
     #+END_SRC

*** Spell check
    Spell check needs *aspell* and its dictionaries to be installed
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'text-mode-hook 'flyspell-mode)
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+END_SRC

*** Additional package archives
    Melpa and Marmalade.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'package)
      (add-to-list 'package-archives
           '("melpa" . "http://melpa.milkbox.net/packages/") t)

      (add-to-list 'package-archives
                   '("marmalade" . "http://marmalade-repo.org/packages/") t)
    #+END_SRC

    Org ELPA
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-to-list 'package-archives
            '("org" . "https://orgmode.org/elpa/") t)
    #+END_SRC

*** Package management
**** Package list
    Define a list of required packages. For ease of use, keep the list
    in alphabetical order.

    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (defvar required-packages
        '(
          evil
          fill-column-indicator
          linum-relative
          magit
          org-plus-contrib
          yasnippet
         ) "a list of packages to ensure are installed at launch.")
    #+END_SRC

**** Auto install
    Then install the packaged listed in the required-packages variable

    To reduce overhead, we use a method to check if all packages are installed
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'cl)
      (defun packages-installed-p ()
        (loop for p in required-packages
              when (not (package-installed-p p)) do (return nil)
              finally (return t)))
    #+END_SRC

    If not all packages are installed, check one by one and install the missing ones.
    This way Emacs does not refresh its package database everytime it starts.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (unless (packages-installed-p)
        ; check for new packages (package versions)
        (message "%s" "Emacs is now refreshing its package database...")
        (package-refresh-contents)
        (message "%s" " done.")
        ; install the missing packages
        (dolist (p required-packages)
          (when (not (package-installed-p p))
            (package-install p))))
    #+END_SRC

*** Evil-mode
    Replace selection, use Ctrl+u to scroll
    (more natural to vim users)
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
     (setq evil-want-C-u-scroll t)
     (delete-selection-mode t)
    #+END_SRC

    Enable global evil-mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'evil)
      (evil-mode 1)
    #+END_SRC

    Adding new word to dictionary
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (define-key evil-normal-state-map "zg" 'flyspell-correct-word-before-point)
    #+END_SRC

*** FCI (indicate column 80)
    Indicate column 80 for programming and text editing
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'prog-mode-hook 'turn-on-fci-mode)
      (add-hook 'text-mode-hook 'turn-on-fci-mode)
    #+END_SRC

    Set the styles
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq-default fill-column 80)
      (setq fci-rule-width 1)
      (setq fci-rule-color "dark orange")
      (require 'fill-column-indicator)
    #+END_SRC

*** Relative line numbers
    This mode recreates a handy feature from Vim by displaying relative line
    numbers.

    Currently the emacs version in Arch repo is 25. When it is updated to 26,
    use `display-line-number-mode` as linum-mode's backend for smooth performance.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; (setq linum-relative-backend 'display-line-numbers-mode)
    #+END_SRC

    Show the real line number of the current line instead of "0"
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq linum-relative-current-symbol "")
    #+END_SRC

    This mode is so nice that I want it to be always on
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'linum-relative)
      (add-hook 'prog-mode-hook 'linum-relative-mode)
      (add-hook 'text-mode-hook 'linum-relative-mode)
    #+END_SRC

    One caveat: it does not play well with folding.
    [[https://github.com/syl20bnr/spacemacs/issues/6536][Read more about this issue]]

*** Org-mode
**** Display
    Fontify code in code blocks
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
        (setq org-src-fontify-natively t))
    #+END_SRC

    Make latex fragments larger, default is roughly 100 font size
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
        (plist-put org-format-latex-options :scale 1.6))
    #+END_SRC

**** Behaviors
    Auto new-line
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'org-mode-hook 'turn-on-auto-fill)
    #+END_SRC

**** Writing layout
     A layout for writing long articles (inspired by Scrivener).

     First define a function that helps with the layout. It enlarges current
     window to twice the size of the other (assuming there are only two of them).
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun halve-other-window-width ()
           "Expand current window to use half of the other window's width."
           (interactive)
           (enlarge-window-horizontally (/ (window-width (next-window)) 2))))
     #+END_SRC

     This function opens content under the current header and moves over the
     cursor.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun org-tree-open-in-new-window ()
           (interactive)
           (delete-other-windows)
           (org-tree-to-indirect-buffer)
           (other-window 1)
           (halve-other-window-width)
           (rename-buffer (org-get-heading) t)))
     #+END_SRC

     Bind this to Ctrl+Shift+Enter
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (define-key org-mode-map
           [C-S-return] 'org-tree-open-in-new-window))
     #+END_SRC

     This function opens content under the current header but does not move the
     cursor.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun org-tree-open-in-new-window-cursor-stays ()
           (interactive)
           (delete-other-windows)
           (org-tree-to-indirect-buffer)
           (other-window 1)
           (halve-other-window-width)
           (rename-buffer (org-get-heading) t)
           (other-window 1)))
     #+END_SRC

     Bind this to Shift+Enter
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (define-key org-mode-map
           [S-return] 'org-tree-open-in-new-window-cursor-stays))
     #+END_SRC

**** Export
     Allow ignoring heading while export the content of subtrees
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (require 'ox-extra)
         (ox-extras-activate '(ignore-headlines)))
     #+END_SRC

*** YaSnippet
**** Configs
    Enable global yas-global-mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'yasnippet)
      (yas-global-mode 1)
    #+END_SRC

    Let the snippets be saved in my own place
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (yas-load-directory "~/.emacs.d/snippets")
    #+END_SRC

    Don't expand snippets in terminal mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'term-mode-hook (lambda()
          (setq yas-dont-activate t)))
    #+END_SRC

**** Snippets
     Here are some snippets that I would like to have on all my machines
     
** Firefox

   The configs for Firefox allows easily resetting it my `rm -rf ~/.mozilla` and
   then get back to a reasonable starting point quickly. Alternatively the same
   thing can be achieved more easily by web syncing. But I prefer having fine
   grained controls.

*** User.js
    See [[http://kb.mozillazine.org/User.js_file][the doc]] for more information.
    This section generates a `user.js` files under the user's home directory.
    The file needs to be *MANUALLY* moved into the
    actual profile directory being used to take effect.
    
    Make accidental Ctrl+Q less annoying
    #+BEGIN_SRC js :tangle "~/.mozilla/user.js"
      // Warn on exiting
      user_pref("browser.warnOnQuit", true);
      user_pref("browser.showQuitWarning", true);
    #+END_SRC

    Make Ctrl+W to be able to close the window
    #+BEGIN_SRC js :tangle "~/.mozilla/user.js"
      // Ctrl+W closes the window if there is only one tab
      user_pref("browser.tabs.closeWindowWithLastTab", true);
    #+END_SRC

*** Extensions

    Open Firefox, then run
    #+BEGIN_SRC sh :tangle no
      sh ~/.mozilla/install_firefox_extensions.sh
    #+END_SRC
    It opens the pages for you to install/update the
    extensions. However, some extensions need additional setup work that
    is not fully automated yet. See the instructions below for details.

**** AdblockPlus
     Block some ads and trackers that come along.
     Install the latest extension 
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://update.adblockplus.org/latest/adblockplusfirefox.xpi
     #+END_SRC
     
**** HTTPS Everythere
     Good stuff made by EFF! Install the latest extension
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://www.eff.org/files/https-everywhere-latest.xpi
     #+END_SRC
     
**** Privacy Badger
     Good stuff made by EFF! Install the latest extension
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://www.eff.org/files/privacy-badger-latest.xpi
     #+END_SRC
     
**** Spell Checker
     The spell checker for English
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://addons.mozilla.org/en-US/firefox/addon/united-states-english-spellche/
     #+END_SRC

**** Tab Numbering
     This extension adds numbers to each tab title, making it convenient to
     switch tabs using Alt+Number.
     Install the extension 
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://addons.mozilla.org/en-US/firefox/addon/tab-numbering/
     #+END_SRC

**** Vimium-FF
     Install the extension
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/
     #+END_SRC
     
     Some custom keymappings that has to be added *MANUALLY*
     #+BEGIN_SRC bash :tangle no
       map d removeTab
       map u restoreTab
       map J nextTab
       map K previousTab
     #+END_SRC
     
     Disable on certain URLs, added *MANUALLY*
     #+BEGIN_SRC bash :tangle no
       *.ipynb
     #+END_SRC

** i3
   Some added customization based on generated i3 config file.
   At the moment it has to be added MANUALLY to =~/.config/i3/config=
   Note that =i3-renameworkspaces= needs some perl modules
   - =AnyEvent::I3= available as =any/perl-anyevent-i3=
   - =Linux::Itodify2= available from AUR as =aur/perl-linux-inotify2=
   #+BEGIN_SRC conf :noweb yes :tangle ~/.config/i3/generated_by_conforg
     # Dynamic workspace naming
     exec_always --no-startup-id exec <<conforg-dir>>/contrib/i3-renameworkspaces/i3-renameworkspaces.pl

     # Lock screen
     bindsym $mod+Shift+d exec slock
   #+END_SRC
   
   Multimedia key support
   #+BEGIN_SRC conf :tangle ~/.config/i3/generated_by_conforg
     # Volume control from my daskeyboard
     bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% #increase sound volume
     bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% #decrease sound volume
     bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle # mute sound

     # Brightness control via xbacklight
     # using two seldomly used keys
     bindsym Pause exec --no-startup-id xbacklight -inc 10
     bindsym Print exec --no-startup-id xbacklight -dec 10
   #+END_SRC
   
** Neovim

** Ranger
   #+BEGIN_SRC conf yes :tangle ~/.config/ranger/rc.conf
     # DO NOT EDIT
     # This file is generated by conf.org from xywei/conforg,
     # all changes will be overwritten.
   #+END_SRC
   
   Use the monocolor theme and enable image previews.
   #+BEGIN_SRC conf yes :tangle ~/.config/ranger/rc.conf
     set colorscheme snow
     set preview_images true
   #+END_SRC

** X Resources
*** Header
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      ! DO NOT EDIT
      ! This file is generated by conf.org from xywei/conforg,
      ! all changes will be overwritten.
    #+END_SRC

*** URXVT
    Scrolling control
    #+BEGIN_SRC conf :tangle "~/.Xresources"
    ! do not scroll with output
    URxvt*scrollTtyOutput: false

    ! scroll in relation to buffer (with mouse scroll or Shift+Page Up)
    URxvt*scrollWithBuffer: true

    ! scroll back to the bottom on keypress
    URxvt*scrollTtyKeypress: true

    ! disable the scrollback buffer for the secondary screen
    URxvt*secondaryScreen: 1
    URxvt*secondaryScroll: 0

    ! hide scroll bar
    URxvt.scrollBar: false
    #+END_SRC
    
    Fonts installed from:
    - WenQuanYi Zen Hei (Chinese) font from =any/wqy-zenhei=
    - WenQuanYi Micro Hei (Chinese) font from =any/wqy-microhei=
    - Nerd fonts from =aur/nerd-fonts-complete=
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      URxvt.font: xft:Inconsolata Nerd Font Mono:pixelsize=20:minspace=False,xft:WenQuanYi Micro Hei Mono:pixelsize=20,xft:WenQuanYi Zen Hei Mono:pixelsize=20,xft:DejaVu Sans Mono Nerd Font Complete:pixelsize=20:minspace=False
      URxvt*letterSpace: 0
    #+END_SRC
*** High DPI
    i3-status and i3's window decorations respect Xresources.
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      Xft.dpi: 150
      Xft.autohint: 0
      Xft.lcdfilter:  lcddefault
      Xft.hintstyle:  hintfull
      Xft.hinting: 1
      Xft.antialias: 1
      Xft.rgba: rgb
    #+END_SRC

** Xmodmap
   Map Capslock to be Esc
   #+BEGIN_SRC conf :tangle "~/.Xmodmap"
     clear Lock
     keycode 0x42=Escape
   #+END_SRC

** Zsh
   This section contains configurations for zshell. To change the default shell
   for the current user, run
   #+BEGIN_SRC sh :tangle no
     chsh -s /bin/zsh
   #+END_SRC
   
   I am not using any framework for my configurations. If you are new to zsh,
   you will probably be interested in checking out one of them, e.g., oh-my-zsh.

*** Pass in meta-configurations
    #+BEGIN_SRC sh :noweb yes :tangle "~/.zshrc"
      # DO NOT EDIT
      # This file is generated by conf.org from xywei/conforg,
      # all changes will be overwritten.

      export CONFORG_DIR=<<conforg-dir>>
      export CONDA_DIR=<<conda-dir>>
      export CLI_UTILS_DIR=<<cli-utils-dir>>
    #+END_SRC

*** Basic setup
    Do nothing if not running interactively
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      case $- in
	  ,*i*) ;;
	    ,*) return;;
      esac
    #+END_SRC
    
    Use emacs mode
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      bindkey -e
    #+END_SRC

*** Bash insulter
    Just to add some fun..
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if [ -f $CONFORG_DIR/contrib/bash-insulter/src/bash.command-not-found ]; then
	source $CONFORG_DIR/contrib/bash-insulter/src/bash.command-not-found
      fi
    #+END_SRC

*** Environment variables
    Set PATH to include:
    - cli-utils: my scripts
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export PATH=$CLI_UTILS_DIR:$PATH
    #+END_SRC
    
    Set default editor to be neovim
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export EDITOR="nvim"
      export VISUAL="nvim"
    #+END_SRC
    
    Enable 256 color support in terminal
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export TERM=screen-256color
    #+END_SRC
    
    Allow using pip outside a virtual env
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export PIP_REQUIRE_VIRTUALENV=false
    #+END_SRC

*** Command history
    Save 1000 commands and enable history sharing among all terminals
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      SAVEHIST=1000
      HISTFILE=~/.zsh_history
      setopt inc_append_history
    #+END_SRC
    
*** Auto completion
    Enable completion
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      autoload -Uz compinit
      compinit
    #+END_SRC

    Git command autocomplete
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      GIT_COMPLETION_BASH=/usr/share/git/completion/git-completion.zsh
      if [ -f $GIT_COMPLETION_ZSH ]; then
	zstyle ':completion:*:*:git:*' script $GIT_COMPLETION_ZSH
      fi
    #+END_SRC

*** Conda
    Starting from conda 4.4 it uses `conda activate`, which is nice
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      . $CONDA_DIR/etc/profile.d/conda.sh
    #+END_SRC
    
    Conda commands autocompletion, making startup much slower
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      fpath+=$CONFORG_DIR/contrib/conda-zsh-completion
      compinit conda
      zstyle ':completion::complete:*' use-cache 1
    #+END_SRC

*** Prompt line
    When there is a custom promptline script, load it
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if [ -f $CLI_UTILS_DIR/promptline ]; then
	source $CLI_UTILS_DIR/promptline
      fi
    #+END_SRC

*** Keyboard (Delete, Meta, PageUp etc.)
    Setup zkbd to use some keys in zsh. It prompts for an interactive setup when
    used for the first time. Note that the file generated sometimes does not
    have the correct filename.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      autoload zkbd
      [[ ! -f ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE ]] && zkbd
      source ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE

      [[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
      [[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
      [[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
      [[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" up-line-or-history
      [[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
      [[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
      [[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" down-line-or-history
      [[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-search
      [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
      [[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-search
      [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
    #+END_SRC

*** Colorful aliases
    Enable color support of ls and also add handy aliases
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias ls='ls --color=auto'
      alias dir='dir --color=auto'
      alias vdir='vdir --color=auto'

      alias grep='grep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias egrep='egrep --color=auto'
    #+END_SRC

*** Convenient aliases
    Some aliases for ls
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias ll='ls -alhF'
      alias la='ls -A'
      alias l='ls -CF'
    #+END_SRC
    
    Use =nvim= for everything
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias vi='nvim'
      alias vim='nvim'
    #+END_SRC

*** Dircolors
    Solarized dircolors. Choices are:
    - dircolors.256dark
    - dircolors.ansi-dark
    - dircolors.ansi-light
    - dircolors.ansi-universal
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export DIRCOLORTHEME='dircolors.256dark'
      export DIRCOLOR_DIR=$CONFORG_DIR/contrib/dircolors-solarized
      eval `dircolors $DIRCOLOR_DIR/${DIRCOLORTHEME:-dircolors.256dark}`
      zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
    #+END_SRC

* Boneyard

This place is for configs that are gathered over time and are not ready
to land yet.
