#+TITLE: A monolithic configuration file in org-mode
#+AUTHOR: Xiaoyu Wei
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* Getting started
  Config files for emacs, neovim, bash and more,
  organized in a single [[http://orgmode.org][Org mode]] file.
  Inspired by [[https://github.com/larstvei/dot-emacs][larstvei/dot-emacs]].

  To get started, first download the file
  #+BEGIN_SRC sh :tangle no
    wget https://raw.githubusercontent.com/xywei/conforg/master/conf.org
  #+END_SRC

  Make your backups.

  Then run the scrip to tangle.

  The process generates and installs the dot files for the included programs.
  To finish the setup for an individual program, see the corresponding
  section for more information.


* Configurations
** Emacs
*** Header
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; DO NOT EDIT
      ;; This file is generated by conf.org from xywei/conforg,
      ;; all changes will be overwritten.

      (package-initialize)
    #+END_SRC

*** Native configs
    Configs in here should overrides all the others if there are conflicts,
    which is done using after-init-hook
**** Recent files
     Build a list of recently opened files and access by C-x C-r
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
	 (progn
	   (recentf-mode 1)
	   (setq recentf-max-menu-items 25)
	   (run-at-time nil (* 5 60) 'recentf-save-list)
	   (global-set-key "\C-x\ \C-r" 'recentf-open-files))))
     #+END_SRC

**** Larger workspace
     Remove scroll bars, menu bars, and toolbars to make more space
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
           (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
           (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
           (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
         )
       ))
     #+END_SRC

**** Window navigation
     Wind-move (vim-like)
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
           (global-set-key (kbd "C-c h") 'windmove-left)
           (global-set-key (kbd "C-c j") 'windmove-down)
           (global-set-key (kbd "C-c k") 'windmove-up)
           (global-set-key (kbd "C-c l") 'windmove-right)
         )
       ))
     #+END_SRC
**** Smoothen some places
     Make frame to be able to resize to full height
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq frame-resize-pixelwise t)
         )
       ))
     #+END_SRC

     Disable automatic horizontal scrolling, which causes abrupt jumps.
     Use C-x < and C-x > to do it manually.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq auto-hscroll-mode nil)
           )
         ))
     #+END_SRC

**** Split window
     Vertical split by default
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq split-height-threshold nil)
           (setq split-width-threshold 80)
         )
       ))
     #+END_SRC

*** Spell check
    Spell check needs *aspell* and its dictionaries to be installed
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'text-mode-hook 'flyspell-mode)
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+END_SRC

*** Additional package archives
    Melpa and Marmalade.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'package)
      (add-to-list 'package-archives
           '("melpa" . "http://melpa.milkbox.net/packages/") t)

      (add-to-list 'package-archives
                   '("marmalade" . "http://marmalade-repo.org/packages/") t)
    #+END_SRC

    Org ELPA
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-to-list 'package-archives
            '("org" . "https://orgmode.org/elpa/") t)
    #+END_SRC

*** Package management
**** Package list
    Define a list of required packages. For ease of use, keep the list
    in alphabetical order.

    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (defvar required-packages
        '(
          evil
          fill-column-indicator
          linum-relative
          magit
          org-plus-contrib
          yasnippet
         ) "a list of packages to ensure are installed at launch.")
    #+END_SRC

**** Auto install
    Then install the packaged listed in the required-packages variable

    To reduce overhead, we use a method to check if all packages are installed
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'cl)
      (defun packages-installed-p ()
        (loop for p in required-packages
              when (not (package-installed-p p)) do (return nil)
              finally (return t)))
    #+END_SRC

    If not all packages are installed, check one by one and install the missing ones.
    This way Emacs does not refresh its package database everytime it starts.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (unless (packages-installed-p)
        ; check for new packages (package versions)
        (message "%s" "Emacs is now refreshing its package database...")
        (package-refresh-contents)
        (message "%s" " done.")
        ; install the missing packages
        (dolist (p required-packages)
          (when (not (package-installed-p p))
            (package-install p))))
    #+END_SRC

*** Evil-mode
    Replace selection, use Ctrl+u to scroll
    (more natural to vim users)
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
     (setq evil-want-C-u-scroll t)
     (delete-selection-mode t)
    #+END_SRC

    Enable global evil-mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'evil)
      (evil-mode 1)
    #+END_SRC

    Adding new word to dictionary
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (define-key evil-normal-state-map "zg" 'flyspell-correct-word-before-point)
    #+END_SRC

*** FCI (indicate column 80)
    Indicate column 80 for programming and text editing
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'prog-mode-hook 'turn-on-fci-mode)
      (add-hook 'text-mode-hook 'turn-on-fci-mode)
    #+END_SRC

    Set the styles
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq-default fill-column 80)
      (setq fci-rule-width 1)
      (setq fci-rule-color "dark orange")
      (require 'fill-column-indicator)
    #+END_SRC

*** Relative line numbers
    This mode recreates a handy feature from Vim by displaying relative line
    numbers.

    Currently the emacs version in Arch repo is 25. When it is updated to 26,
    use `display-line-number-mode` as linum-mode's backend for smooth performance.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; (setq linum-relative-backend 'display-line-numbers-mode)
    #+END_SRC

    Show the real line number of the current line instead of "0"
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq linum-relative-current-symbol "")
    #+END_SRC

    This mode is so nice that I want it to be always on
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'linum-relative)
      (add-hook 'prog-mode-hook 'linum-relative-mode)
      (add-hook 'text-mode-hook 'linum-relative-mode)
    #+END_SRC

    One caveat: it does not play well with folding.
    [[https://github.com/syl20bnr/spacemacs/issues/6536][Read more about this issue]]

*** Org-mode
**** Display
    Fontify code in code blocks
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
        (setq org-src-fontify-natively t))
    #+END_SRC

    Make latex fragments larger, default is roughly 100 font size
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
        (plist-put org-format-latex-options :scale 1.6))
    #+END_SRC

**** Behaviors
    Auto new-line
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'org-mode-hook 'turn-on-auto-fill)
    #+END_SRC

**** Writing layout
     A layout for writing long articles (inspired by Scrivener).

     First define a function that helps with the layout. It enlarges current
     window to twice the size of the other (assuming there are only two of them).
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun halve-other-window-width ()
           "Expand current window to use half of the other window's width."
           (interactive)
           (enlarge-window-horizontally (/ (window-width (next-window)) 2))))
     #+END_SRC

     This function opens content under the current header and moves over the
     cursor.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun org-tree-open-in-new-window ()
           (interactive)
           (delete-other-windows)
           (org-tree-to-indirect-buffer)
           (other-window 1)
           (halve-other-window-width)
           (rename-buffer (org-get-heading) t)))
     #+END_SRC

     Bind this to Ctrl+Shift+Enter
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (define-key org-mode-map
           [C-S-return] 'org-tree-open-in-new-window))
     #+END_SRC

     This function opens content under the current header but does not move the
     cursor.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun org-tree-open-in-new-window-cursor-stays ()
           (interactive)
           (delete-other-windows)
           (org-tree-to-indirect-buffer)
           (other-window 1)
           (halve-other-window-width)
           (rename-buffer (org-get-heading) t)
           (other-window 1)))
     #+END_SRC

     Bind this to Shift+Enter
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (define-key org-mode-map
           [S-return] 'org-tree-open-in-new-window-cursor-stays))
     #+END_SRC

**** Export
     Allow ignoring heading while export the content of subtrees
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (require 'ox-extra)
         (ox-extras-activate '(ignore-headlines)))
     #+END_SRC

*** YaSnippet
**** Configs
    Enable global yas-global-mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'yasnippet)
      (yas-global-mode 1)
    #+END_SRC

    Let the snippets be saved in my own place
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (yas-load-directory "~/.emacs.d/snippets")
    #+END_SRC

    Don't expand snippets in terminal mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'term-mode-hook (lambda()
          (setq yas-dont-activate t)))
    #+END_SRC

**** Snippets
     Here are some snippets that I would like to have on all my machines
     

** Neovim


** Bash


* Boneyard

This place is for configs that are gathered over time and are not ready
to land yet.
