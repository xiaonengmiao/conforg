#+TITLE: A monolithic configuration file in org-mode
#+AUTHOR: Xiaoyu Wei
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* Getting started
  Config files for emacs, neovim, bash and more,
  organized in a single [[http://orgmode.org][Org mode]] file.
  Inspired by [[https://github.com/larstvei/dot-emacs][larstvei/dot-emacs]].

  To get started, first download the file
  #+BEGIN_SRC sh :tangle no
    wget https://raw.githubusercontent.com/xywei/conforg/master/conf.org
  #+END_SRC

  *Make your backups.*

  Then run the scrip to tangle. You need Emacs and Org-mode, of course.
  #+BEGIN_SRC sh :tangle no
    emacs -Q --batch --eval '(require (quote org))' \
                     --eval '(org-babel-tangle-file "conf.org")'
  #+END_SRC

  The process generates and installs the dot files for the included programs.
  Note that it will overwrite all the concerned files, so make sure to backup
  your own stuff first.

  To finish the setup for an individual program, see the corresponding
  section for more information.
  (Tip: search for MANUALLY in all caps to find those places).
  
  For the best experience, having a comprehensive set of fonts installed is
  recommended. The following packages are helpful to simplify the process:
  - =aur/all-repository-fonts=
  - =aur/nerd-fonts-complete=
    
  For the complete setup with some addons (e.g. TPM, vim-plug), use the included
  script `install.sh`. Before running the install script, make sure that the
  repository is cloned as `$HOME/.conforg` and all submodules are downloaded
  #+BEGIN_SRC sh :tangle no
      git submodule update --init --recursive
  #+END_SRC

* Meta-configurations
  First of all, set some global options to help setting things up.
  The meta-configurations are set via noweb references.
  
** Conforg directory:
   #+NAME: conforg-dir
   #+BEGIN_SRC sh :results output :exports none :tangle no
     $HOME/.conforg
   #+END_SRC

** Conda directory: 
   Root directory of Anaconda/Miniconda installation
   #+NAME: conda-dir
   #+BEGIN_SRC sh :results output :exports none :tangle no
     $HOME/miniconda3
   #+END_SRC

** Cli-utils directory:
   Directory of my scripts
   #+NAME: cli-utils-dir
   #+BEGIN_SRC sh :results output :exports none :tangle no
     $HOME/cli-utils
   #+END_SRC

* Configurations
** Emacs
*** Header
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; DO NOT EDIT
      ;; This file is generated by conf.org from xywei/conforg,
      ;; all changes will be overwritten.

      (package-initialize)
    #+END_SRC
    
    A helper function for tracing obsolete functions
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; (defun debug-on-load-obsolete (filename)
      ;;  (when (equal (car (last (split-string filename "[/\\]") 2))
      ;;               "obsolete")
      ;;    (debug)))
      ;; (add-to-list 'after-load-functions #'debug-on-load-obsolete)
    #+END_SRC

*** Native configs
    Configs in here should overrides all the others if there are conflicts,
    which is done using after-init-hook
**** Recent files
     Build a list of recently opened files and access by C-x C-r
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
	 (progn
	   (recentf-mode 1)
	   (setq recentf-max-menu-items 25)
	   (run-at-time nil (* 5 60) 'recentf-save-list)
	   (global-set-key "\C-x\ \C-r" 'recentf-open-files))))
     #+END_SRC
**** Auto-backup and auto-save files
     Emacs creates `file~` auto-backup files and `#file#` auto-save files.
     Such behavior confuses programs like `git` and `isync`.
     Instead of turning this feature off, it is more prudent to simply get
     them out of sight by storing them in the OS’s tmp directory instead.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (setq backup-directory-alist
	     `((".*" . ,temporary-file-directory)))
       (setq auto-save-file-name-transforms
	     `((".*" ,temporary-file-directory t)))
     #+END_SRC

**** Larger workspace
     Remove scroll bars, menu bars, and toolbars to make more space
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
           ;; (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
           (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
           (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
         )
       ))
     #+END_SRC

**** Window navigation
     Wind-move (vim-like)
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
           (global-set-key (kbd "C-c h") 'windmove-left)
           (global-set-key (kbd "C-c j") 'windmove-down)
           (global-set-key (kbd "C-c k") 'windmove-up)
           (global-set-key (kbd "C-c l") 'windmove-right)
         )
       ))
     #+END_SRC
**** Smoothen some places
     Make frame to be able to resize to full height
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq frame-resize-pixelwise t)
         )
       ))
     #+END_SRC

     Disable automatic horizontal scrolling, which causes abrupt jumps.
     Use C-x < and C-x > to do it manually.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq auto-hscroll-mode nil)
           )
         ))
     #+END_SRC

**** Split window
     Vertical split by default
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
         (progn
           (setq split-height-threshold nil)
           (setq split-width-threshold 80)
         )
       ))
     #+END_SRC

*** Ido-mode
   Interactively do things.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'after-init-hook '(lambda ()
       (progn
	 ;; make buffer switch command do suggestions, also for find-file command
	 (require 'ido)
	 (ido-mode 1)

	 ;; show choices vertically
	 (if (version< emacs-version "25")
	     (progn
	       (make-local-variable 'ido-separator)
	       (setq ido-separator "\n"))
	   (progn
	     (make-local-variable 'ido-decorations)
	     (setf (nth 2 ido-decorations) "\n")))

	 ;; show any name that has the chars you typed
	 (setq ido-enable-flex-matching t)
	 ;; use current pane for newly opened file
	 (setq ido-default-file-method 'selected-window)
	 ;; use current pane for newly switched buffer
	 (setq ido-default-buffer-method 'selected-window)
	 ;; stop ido from suggesting when naming new file
	 (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil)

	 ;; big minibuffer height, for ido to show choices vertically
	 (setq max-mini-window-height 0.5)

	 ;; stop ido suggestion when doing a save-as
	 (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil)

	 )))

     #+END_SRC
*** Spell check
    Spell check needs *aspell* and its dictionaries to be installed
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'text-mode-hook 'flyspell-mode)
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    #+END_SRC

*** Additional package archives
    Melpa and Marmalade.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'package)
      (add-to-list 'package-archives
           '("melpa" . "http://melpa.milkbox.net/packages/") t)

      (add-to-list 'package-archives
                   '("marmalade" . "http://marmalade-repo.org/packages/") t)
    #+END_SRC

    Org ELPA
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-to-list 'package-archives
            '("org" . "https://orgmode.org/elpa/") t)
    #+END_SRC

*** Package management
**** Package list
    Define a list of required packages. For ease of use, keep the list
    in alphabetical order.

    TODO: transition to manage packages with =use-package=.

    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (defvar required-packages
        '(
          evil
          evil-collection
          evil-goggles
          evil-org
          evil-surround
          fill-column-indicator
          magit
          nlinum
          nlinum-relative
          org-bullets
          org-plus-contrib
	  org-pomodoro
          org-ref
          org2blog
          powerline
          solarized-theme
          use-package
          yasnippet
         ) "a list of packages to ensure are installed at launch.")
    #+END_SRC

**** Auto install
    Then install the packaged listed in the required-packages variable

    To reduce overhead, we use a method to check if all packages are installed
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'cl)
      (defun packages-installed-p ()
        (loop for p in required-packages
              when (not (package-installed-p p)) do (return nil)
              finally (return t)))
    #+END_SRC

    If not all packages are installed, check one by one and install the missing ones.
    This way Emacs does not refresh its package database everytime it starts.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (unless (packages-installed-p)
        ; check for new packages (package versions)
        (message "%s" "Emacs is now refreshing its package database...")
        (package-refresh-contents)
        (message "%s" " done.")
        ; install the missing packages
        (dolist (p required-packages)
          (when (not (package-installed-p p))
            (package-install p))))
    #+END_SRC
    
    TODO: manage system packages using =system-packages=.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package system-packages
        :ensure t)
    #+END_SRC
    
    Load org2blog configs.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
     (load-file "~/.emacs.d/org2blogrc.el")
    #+END_SRC

*** MacOS Compatibilities
    Ensure that Emacs uses the same environment setup as user shell.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (when (memq window-system '(mac ns x))
        (use-package exec-path-from-shell
                     :ensure t)
        (exec-path-from-shell-initialize))
    #+END_SRC
    
    Set package manager to =homebrew=.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (when (memq window-system '(mac ns))
        (setq system-packages-use-sudo nil)
        (setq system-packages-package-manager 'brew))
    #+END_SRC

*** Evil-mode
    Replace selection, use Ctrl+u to scroll
    (more natural to vim users)
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
     (setq evil-want-C-u-scroll t)
     (delete-selection-mode t)
    #+END_SRC

    Enable global evil-mode.
    (As a general guideline, don’t bind anything to : nor <escape>).
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
    (use-package evil
     :ensure t
     :init
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     :config
     (evil-mode 1))
    #+END_SRC
    
    Enable evil-collection for keybindings in more modes.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
    #+END_SRC

    Enable evil-surround for keybindings like =ds"=.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package evil-surround
	:ensure t
	:config
	(global-evil-surround-mode 1))
    #+END_SRC
    
    Visual hints to help keeping up with what's happening.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package evil-goggles
	:ensure t
	:config
	(evil-goggles-mode)
	(evil-goggles-use-diff-faces))
    #+END_SRC

    Adding new word to dictionary
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (define-key evil-normal-state-map "zg" 'flyspell-correct-word-before-point)
    #+END_SRC
    
    Evil-org
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package evil-org
	:ensure t
	:after org
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
		  (lambda ()
		    (evil-org-set-key-theme)))
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys))
    #+END_SRC
    
    Org2blog
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package org2blog
	:ensure t
	:after org
	:config
	(add-hook 'org-mode-hook #'org2blog/wp-org-mode-hook-fn))
    #+END_SRC

*** FCI (indicate column 80)
    Indicate column 80 for programming and text editing
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'prog-mode-hook 'turn-on-fci-mode)
      (add-hook 'text-mode-hook 'turn-on-fci-mode)
    #+END_SRC

    Set the styles
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq-default fill-column 80)
      (setq fci-rule-width 1)
      (setq fci-rule-color "dark orange")
      (require 'fill-column-indicator)
    #+END_SRC

*** Relative line numbers
    This mode recreates a handy feature from Vim by displaying relative line
    numbers.

    Currently the emacs version in Arch repo is 25. When it is updated to 26,
    use `display-line-number-mode` as linum-mode's backend for smooth performance.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; (setq linum-relative-backend 'display-line-numbers-mode)
    #+END_SRC

    Show the real line number of the current line instead of "0"
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; (setq linum-relative-current-symbol "")
    #+END_SRC

    This mode is so nice that I want it to be always on
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      ;; (require 'linum-relative)
      ;; (add-hook 'prog-mode-hook 'linum-relative-mode)
      ;; (add-hook 'text-mode-hook 'linum-relative-mode)
    #+END_SRC

    One caveat: it does not play well with folding.
    [[https://github.com/syl20bnr/spacemacs/issues/6536][Read more about this issue]]
    
    Now I have switched to =nlinum= for better performance
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (use-package nlinum-relative
	  :config
	  ;; something else you want
	  (nlinum-relative-setup-evil)
	  (add-hook 'prog-mode-hook 'nlinum-relative-mode)
	  (add-hook 'text-mode-hook 'nlinum-relative-mode))
    #+END_SRC

*** Powerline
    (No need for patched fonts)
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'powerline)
      (powerline-center-evil-theme)
    #+END_SRC
*** Org-mode
**** Display
    Fontify code in code blocks
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
        (setq org-src-fontify-natively t))
    #+END_SRC

    Make latex fragments larger, default is roughly 100 font size
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
        (plist-put org-format-latex-options :scale 1.6))
    #+END_SRC

    Org-bullets that display nice bullet symbols.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+END_SRC
    
    To do similar stuff with TODO items (courtesy of
    https://www.draketo.de/english/emacs/todo-letters): 
    - ❢ To do
    - ☯ In progress
      - ⚙ A program is running (optional detail)
      - ✍ I’m writing (optional detail)
    - ⧖ Waiting
    - ☺ To report
    - ✔ Done
    - ⌚ Maybe do this at some later time
    - ✘ Won’t do / Canceled

    Here I only use the symbols to make the interface less cluttered.
    Note: Anything before the | in the SEQ_TODO is shown in red (not yet done),
    anything after the | is show in green (done). Things which get triggered
    when something is done (like storing the time of a scheduled entry) happen
    when the state crosses the |. 
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (with-eval-after-load 'org
	(setq org-todo-keywords '(
				  (sequence "❢" "☯" "⚙" "✍" "⧖" "|" "☺" "✔" "⌚" "✘"))))
    #+END_SRC

**** Behaviors
    Use mouse to toggle tree visibility.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'org-mouse)
    #+END_SRC

    Auto new-line
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'org-mode-hook 'turn-on-auto-fill)
    #+END_SRC

    Toggle latex preview with fewer key strokes
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'org-mode-hook
         (lambda () (local-set-key (kbd "C-c p") 'org-toggle-latex-fragment)))
    #+END_SRC

    Save link with =C-c l=, (insert link with =C-c C-l=, follow link with =C-c C-o=)
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (add-hook 'org-mode-hook
         (lambda () (local-set-key (kbd "C-c l") 'org-store-link)))
    #+END_SRC

    Agenda view (global) =C-c a=, capture (global) =C-c c=
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq org-agenda-files (directory-files-recursively "~/Agenda/" "\.org$"))
      (add-hook 'after-init-hook
		'(lambda ()
		   (progn
		     (global-set-key (kbd "C-c a") 'org-agenda)
		     (global-set-key (kbd "C-c c") 'org-capture)
		     )
		   ))
    #+END_SRC

**** References
     For org-ref. Load the module and set keybindings or inserting citations and
     cross-references.
     Disable =show-broken-links= for better performance.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (require 'org-ref))
       (add-hook 'org-mode-hook
         (lambda ()
           (setq org-latex-prefer-user-labels t)
	   (setq org-ref-show-broken-links nil)
           (local-set-key (kbd "C-c t") 'org-ref-helm-insert-cite-link)
           (local-set-key (kbd "C-c r") 'org-ref-helm-insert-ref-link)
           ))
     #+END_SRC

**** Writing layout
     A layout for writing long articles (inspired by Scrivener).

     First define a function that helps with the layout. It enlarges current
     window to twice the size of the other (assuming there are only two of them).
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun halve-other-window-width ()
           "Expand current window to use half of the other window's width."
           (interactive)
           (enlarge-window-horizontally (/ (window-width (next-window)) 2))))
     #+END_SRC

     This function opens content under the current header and moves over the
     cursor.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun org-tree-open-in-new-window ()
           (interactive)
           (delete-other-windows)
           (org-tree-to-indirect-buffer)
           (other-window 1)
           (halve-other-window-width)
           (rename-buffer (org-get-heading) t)))
     #+END_SRC

     Bind this to Ctrl+Shift+Enter
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (define-key org-mode-map
           [C-S-return] 'org-tree-open-in-new-window))
     #+END_SRC

     This function opens content under the current header but does not move the
     cursor.
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (defun org-tree-open-in-new-window-cursor-stays ()
           (interactive)
           (delete-other-windows)
           (org-tree-to-indirect-buffer)
           (other-window 1)
           (halve-other-window-width)
           (rename-buffer (org-get-heading) t)
           (other-window 1)))
     #+END_SRC

     Bind this to Shift+Enter
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (define-key org-mode-map
           [S-return] 'org-tree-open-in-new-window-cursor-stays))
     #+END_SRC

**** Export
     Allow ignoring heading while export the content of subtrees
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (with-eval-after-load 'org
         (require 'ox-extra)
         (ox-extras-activate '(ignore-headlines)))
     #+END_SRC

**** Agenda
     Open agenda in current window
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (setq org-agenda-window-setup (quote current-window))
     #+END_SRC

     Warn me of any deadlines in next 7 days
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (setq org-deadline-warning-days 7)
     #+END_SRC

     Show me tasks scheduled or due in next fortnight
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (setq org-agenda-span (quote fortnight))
     #+END_SRC

     Sort tasks in order of when they are due and then by priority
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (setq org-agenda-sorting-strategy
	 (quote
	  ((agenda deadline-up priority-down)
	   (todo priority-down category-keep)
	   (tags priority-down category-keep)
	   (search category-keep))))
     #+END_SRC

**** Capture
     Default to capturing a task dated today and optionally link to the current file (e.g. email)
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
       (setq org-capture-templates
        '(("m" "todo (email)" entry (file+headline "~/Agenda/mylife.org" "Inbox")
            "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
          ("t" "todo" entry (file+headline "~/Agenda/mylife.org" "Inbox")
           "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
         ))
     #+END_SRC

**** Pomodoro
     (To have sound notifications, install =alsa-utiles= to get =aplay=.)
     
     Usage:
     1. Move point to a task as you would do with org-clock-in. Call
        =org-pomodoro= the task will be clocked-in. 
     2. When there's time for break, the task will be =org-clock-out='ed
     3. If you call =org-pomodoro= during a pomodoro, you'll be asked to reset a
        pomodoro. 
     4. If you call =org-pomodoro= outside org-mode, you'll be presented with list
        of recent tasks, as C-u org-clock-in would. 

*** Color Theme
    When starting for the first time Emacs will ask if you want to trust this
    theme. Answer yes to have it auto-loaded on future startups.
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (setq x-underline-at-descent-line t)
      (add-hook 'after-init-hook (lambda () (load-theme 'solarized-light)))
    #+END_SRC

*** YaSnippet
**** Configs
    Enable global yas-global-mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (require 'yasnippet)
      (yas-global-mode 1)
    #+END_SRC

    Let the snippets be saved in my own place
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (yas-load-directory "~/.emacs.d/snippets")
    #+END_SRC

    Don't expand snippets in terminal mode
    #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-hook 'term-mode-hook (lambda()
          (setq yas-dont-activate t)))
    #+END_SRC

**** Snippets
     Here are some snippets that I would like to have on all my machines
** Email
*** isync
    The install script handles configuring `isync`.
    (It dumps encrypted config files using pass).

*** Mutt/Neomutt
    One can use mutt/neomutt to read mails.
    Here is a one liner that uses Lynx to open mails
    in mutt.
    #+BEGIN_SRC conf :tangle "~/.muttrc"
      auto_view text/html
    #+END_SRC
    
    #+BEGIN_SRC conf :tangle "~/.mailcap"
      text/html; lynx -dump %s; nametemplate=%s.html; copiousoutput;
    #+END_SRC

*** Mu4e
**** Installation
     Mu4e is the email client of choice due to its great integration
     with org-mode.

     Note: Since mu4e is not just elisp, much of it is in C, it cannot
     be installed from MELPA. This setup assume that it is installed
     from Arch's repository (Community/mu), and we load it into Emacs
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
      (require 'mu4e)
     #+END_SRC
    
**** Configuration
     Load the configuration file for mu4e.
     (Requires use-package).
     #+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/init.el"
      (load-file "~/.emacs.d/mu4e-config.el")
     #+END_SRC
    
     The evil-collection adds evil keybindings for mu4e.

     General commands:
     | Commmand                 | evil-mu4e | Alternative |
     |--------------------------+-----------+-------------|
     | Jump to maildir          | J         |             |
     | Update                   | u         |             |
     | Compose message          | cc        | C           |
     | Kill update mail process | x         |             |

     Commands for header-mode and view-mode:
     | Command                         | evil-mu4e | Alternative |
     |---------------------------------+-----------+-------------|
     | Next message                    | C-j       |             |
     | Previous message                | C-k       |             |
     | Mark the current thread as read | T         |             |
     | Compose message                 | cc        | C           |
     | Compose edit**                  | ce        | E           |
     | Compose forward**               | cf        | F           |
     | Compose reply                   | cr        | R           |
     | Change sorting***               | o         | O           |
     | Rerun search                    | gr        |             |
     | Toggle include related          | zr        |             |
     | Toggle threading                | zt        |             |
     | Toggle hide cited               | za        |             |
     | Skip duplicates                 | zd        |             |
     | Show log                        | gl        |             |
     | Select other view               | gv        |             |
     | Save attachement(s)             | p         | P           |
     | Save url                        | yu        |             |
     | Go to url                       | gx        |             |
     | Fetch url                       | gX        |             |

     - * denotes only in header-mode
     - ** denotes Alternative only in header-mode
     - *** denotes Alternative only in view-mode

**** Search

     The following guide is excerpted from https://www.djcbsoftware.nl/code/mu/mu4e/Queries.html.

     mu4e queries are the same as the ones that mu find understands30. Let’s look at some examples here; you can consult the mu-query man page for the details.

     - Get all messages regarding bananas:
     : bananas

     - Get all messages regarding bananas from John with an attachment:
     : from:john and flag:attach and bananas

     - Get all messages with subject wombat in June 2017
     : subject:wombat and date:20170601..20170630

     - Get all messages with PDF attachments in the /projects folder
     : maildir:/projects and mime:application/pdf

     - Get all messages about Rupert in the /Sent Items folder. Note that maildirs with spaces must be quoted.
     : "maildir:/Sent Items" and rupert

     - Get all important messages which are signed:
     : flag:signed and prio:high

     - Get all messages from Jim without an attachment:
     : from:jim and not flag:attach

     - Get all messages with Alice in one of the contacts-fields (to, from, cc, bcc):
     : contact:alice

     - Get all unread messages where the subject mentions Ångström: (search is case-insensitive and accent-insensitive, so this matches Ångström, angstrom, aNGstrøM, ...)
     : subject:Ångström and flag:unread

     - Get all unread messages between Mar-2012 and Aug-2013 about some bird:
     : date:20120301..20130831 and nightingale and flag:unread

     - Get today’s messages:
     : date:today..now

     - Get all messages we got in the last two weeks regarding emacs:
     : date:2w.. and emacs

     - Get messages from the Mu mailing list:
     : list:mu-discuss.googlegroups.com
     Note — in the Headers view you may see the ‘friendly name’ for a list; however, when searching you need the real name. You can see the real name for a mailing list from the friendly name’s tool-tip.

     - Get messages with a subject soccer, Socrates, society, ...; note that the ‘*’-wildcard can only appear as a term’s rightmost character:
     : subject:soc*

     - Get all messages not sent to a mailing-list:
     : NOT flag:list

     - Get all mails with attachments with filenames starting with pic; note that the ‘*’ wildcard can only appear as the term’s rightmost character:
     : file:pic*

     - Get all messages with PDF-attachments:
     : mime:application/pdf

     - Get all messages with image attachments, and note that the ‘*’ wildcard can only appear as the term’s rightmost character:
     : mime:image/*

**** Mark

     The following guide is excerpted from
     https://www.djcbsoftware.nl/code/mu/mu4e/What-to-mark-for.html.

     What to mark for -- mu4e supports a number of marks:

     | mark for/as | keybinding  | description                   |
     |-------------+-------------+-------------------------------|
     | 'something' | *, <insert> | mark now, decide later        |
     | delete      | D, <delete> | delete                        |
     | flag        | +           | mark as 'flagged' ('starred') |
     | move        | m           | move to some maildir          |
     | read        | !           | mark as read                  |
     | refile      | r           | mark for refiling             |
     | trash       | d           | move to the trash folder      |
     | untrash     | =           | remove 'trash' flag           |
     | unflag      | -           | remove 'flagged' mark         |
     | unmark      | u           | remove mark at point          |
     | unmark all  | U           | remove all marks              |
     | unread      | ?           | marks as unread               |
     | action      | a           | apply some action             |

     After marking a message, the left-most columns in the headers view indicate
     the kind of mark. This is informative, but if you mark many (say,
     thousands)
     messages, this slows things down significantly32. For this reason,
     you can disable this by setting mu4e-headers-show-target to nil.

     "something" is a special kind of mark; you can use it to mark messages
     for ‘something’, and then decide later what the ‘something’ should be33
     Later,
     you can set the actual mark using M-x mu4e-mark-resolve-deferred-marks
     (#). Alternatively, mu4e will ask you when you try to execute the marks
     (x). 

** Firefox

   The configs for Firefox allows easily resetting it my `rm -rf ~/.mozilla` and
   then get back to a reasonable starting point quickly. Alternatively the same
   thing can be achieved more easily by web syncing. But I prefer having fine
   grained controls.

*** User.js
    See [[http://kb.mozillazine.org/User.js_file][the doc]] for more information.
    This section generates a `user.js` files under the user's home directory.
    The file needs to be *MANUALLY* moved into the
    actual profile directory being used to take effect.
    
    Make accidental Ctrl+Q less annoying
    #+BEGIN_SRC js :tangle "~/.mozilla/user.js"
      // Warn on exiting
      user_pref("browser.warnOnQuit", true);
      user_pref("browser.showQuitWarning", true);
    #+END_SRC

    Make Ctrl+W to be able to close the window
    #+BEGIN_SRC js :tangle "~/.mozilla/user.js"
      // Ctrl+W closes the window if there is only one tab
      user_pref("browser.tabs.closeWindowWithLastTab", true);
    #+END_SRC

*** Extensions

    Open Firefox, then run
    #+BEGIN_SRC sh :tangle no
      sh ~/.mozilla/install_firefox_extensions.sh
    #+END_SRC
    It opens the pages for you to install/update the
    extensions. However, some extensions need additional setup work that
    is not fully automated yet. See the instructions below for details.

**** AdblockPlus
     Block some ads and trackers that come along.
     Install the latest extension 
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://update.adblockplus.org/latest/adblockplusfirefox.xpi
     #+END_SRC
     
**** HTTPS Everythere
     Good stuff made by EFF! Install the latest extension
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://www.eff.org/files/https-everywhere-latest.xpi
     #+END_SRC
     
**** Privacy Badger
     Good stuff made by EFF! Install the latest extension
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://www.eff.org/files/privacy-badger-latest.xpi
     #+END_SRC
     
**** Spell Checker
     The spell checker for English
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://addons.mozilla.org/en-US/firefox/addon/united-states-english-spellche/
     #+END_SRC

**** Tab Numbering
     This extension adds numbers to each tab title, making it convenient to
     switch tabs using Alt+Number.
     Install the extension 
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://addons.mozilla.org/en-US/firefox/addon/tab-numbering/
     #+END_SRC

**** Vimium-FF
     Install the extension
     #+BEGIN_SRC bash :tangle "~/.mozilla/install_firefox_extensions.sh"
       firefox https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/
     #+END_SRC
     
     Some custom keymappings that has to be added *MANUALLY*
     #+BEGIN_SRC bash :tangle no
       map d removeTab
       map u restoreTab
       map J nextTab
       map K previousTab
     #+END_SRC
     
     Disable on certain URLs, added *MANUALLY*
     #+BEGIN_SRC bash :tangle no
       *.ipynb
     #+END_SRC

** Fonts
   Fonts for Linux, for details, see https://www.freedesktop.org/software/fontconfig/fontconfig-user.html.
   
   #+BEGIN_SRC xml :tangle ~/.config/fontconfig/fonts.conf
     <?xml version='1.0'?>
     <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
     <!--
	     # DO NOT EDIT
	     # This file is generated by conf.org from xywei/conforg,
	     # all changes will be overwritten.
     -->
   #+END_SRC
   
   Basic fonts that I use.
   #+BEGIN_SRC xml :tangle ~/.config/fontconfig/fonts.conf
     <fontconfig>
      <alias>
	 <family>serif</family>
	 <prefer><family>Linux Libertine</family></prefer>
       </alias>
       <alias>
	 <family>sans-serif</family>
	 <prefer><family>Linux Libertine</family></prefer>
       </alias>
       <alias>
	 <family>sans</family>
	 <prefer><family>Source Sans Pro</family></prefer>
       </alias>
       <alias>
	 <family>monospace</family>
	 <prefer><family>Hack Nerd Font Mono</family></prefer>
       </alias>
     </fontconfig>
   #+END_SRC
   
** Git
*** The Git config file.

   #+BEGIN_SRC conf :tangle ~/.gitconfig
      # DO NOT EDIT
      # This file is generated by conf.org from xywei/conforg,
      # all changes will be overwritten.
   #+END_SRC
      
   #+BEGIN_SRC conf :tangle ~/.gitconfig
     [user]
	     email = wxy0516@gmail.com
	     name = xywei
	     signingkey = F038F98DF34297D9
     [push]
	     default = simple
     [alias]
	     mylog = log --pretty=format:'%h %s [%an]' --graph
	     lol = log --graph --decorate --pretty=oneline --abbrev-commit --all
	     br = branch
	     ds = diff --staged
	     wd = diff --word-diff --ignore-all-space
	     wds = diff --staged --word-diff --ignore-all-space
	     difftex = difftool -y -t latex
	     lg = log --oneline --reverse
	     dls = diff-tree --no-commit-id --name-status -r
	     st = status
	     co = checkout
	     br = branch
	     ci = commit
	     getroot = !pwd
	     beholdmyamazingcode = commit
     [credential]
	     helper = cache --timeout=3600
     [difftool.latex]
	     cmd = latexdiff "$LOCAL" "$REMOTE"
     [core]
	     excludesfile = ~/.gitignore_global
	     editor = $(which nvim)
	     filemode = false
     [gpg]
	     program = gpg2
     [commit]
	     gpgsign = true
     [color]
	     ui = auto
     [filter "lfs"]
	     clean = git-lfs clean -- %f
	     smudge = git-lfs smudge -- %f
	     process = git-lfs filter-process
	     required = true
   #+END_SRC
   
*** The global ignored file list.
   To un-ignore some of these files, or
   ignore more files on a project basis,
   edit `.gitignore` in the project folder.

   #+BEGIN_SRC sh :tangle ~/.gitignore_global
      # DO NOT EDIT
      # This file is generated by conf.org from xywei/conforg,
      # all changes will be overwritten.
   #+END_SRC

   The `.gitignore_global` contents are generated
   by `install.sh` after tangling.

** i3
*** Basic Settings
   Some added customization based on generated i3 config file.
   At the moment it has to be added MANUALLY to =~/.config/i3/config=
   Note that =i3-renameworkspaces= needs some perl modules
   - =AnyEvent::I3= available as =any/perl-anyevent-i3=
   - =Linux::Itodify2= available from AUR as =aur/perl-linux-inotify2=
   #+BEGIN_SRC conf :noweb yes :tangle ~/.config/i3/generated_by_conforg
     # Dynamic workspace naming
     exec_always --no-startup-id exec <<conforg-dir>>/contrib/i3-renameworkspaces/i3-renameworkspaces.pl

     # Lock screen
     bindsym $mod+Shift+d exec slock
   #+END_SRC
   
   Notes on using =kitty=: invoke with =kitty -1= to speed up the startup.
   It starts a daemon on first run, and make new windows from it for the
   following runs.
   
   Multimedia key support
   #+BEGIN_SRC conf :tangle ~/.config/i3/generated_by_conforg
     # Volume control from my daskeyboard
     bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5% #increase sound volume
     bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5% #decrease sound volume
     bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle # mute sound

     # Brightness control via xbacklight
     # using two seldomly used keys
     bindsym Pause exec --no-startup-id xbacklight -inc 5
     bindsym Print exec --no-startup-id xbacklight -dec 5
   #+END_SRC
   
*** i3 Status
    
    Generate i3bar layout. Add the conf file to i3status invocation by modifying
    the i3 configuration file
    #+BEGIN_SRC conf :tangle ~/.config/i3/generated_by_conforg
      bar {
	  status_command i3status -c ~/.config/i3/i3status.conf
      }
    #+END_SRC
    
    Then the =i3status.conf= is handled for you
    #+BEGIN_SRC conf :tangle ~/.config/i3/i3status.conf
      general {
	colors = true
	interval = 1
      }

      order += "ethernet _first_"
      order += "wireless _first_"
      order += "load"
      order += "cpu_usage"
      order += "cpu_temperature 0"
      order += "disk /"
      order += "battery 0"
      order += "volume master"
      order += "time"

      battery 0 {
	last_full_capacity = true
	# format = "%status %percentage"
	format = "%percentage"
	format_down = ""
	status_chr = "⚡ CHR"
	status_bat = "🔋 BAT"
	status_unk = "? UNK"
	status_full = "☻ FULL"
	path = "/sys/class/power_supply/CMB0/uevent"
	low_threshold = 10
      }

      ethernet _first_ {
      # if you use %speed, i3status requires root privileges
	format_up = " Ethernet  %speed  %ip"
	format_down = ""
      }

      wireless _first_ {
	format_up = " Wifi  %quality  %essid  %bitrate  %ip"
	# format_down = "wlan0 "
	format_down = ""
      }

      time {
	format = " %a, %d %b %H:%M:%S"
      }

      load {
	format = " %1min"
      }

      cpu_usage {
	format = " %usage"
      }

      cpu_temperature 0 {
	format = " %degrees°C"
	max_threshold = "65"
      }

      disk "/" {
	format = " %avail"
      }

      volume master {
	format = " %volume"
	format_muted = " %volume"
	device = "default"
	mixer = "Master"
	mixer_idx = 0
      }
    #+END_SRC
   
** Kitty
   =Kitty= is a GPU accelerated terminal emulator, by the author of =Calibre=.
*** Front-matter
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      # vim:fileencoding=utf-8:ft=conf:foldmethod=marker

      # DO NOT EDIT
      # This file is generated by conf.org from xywei/conforg,
      # all changes will be overwritten.
    #+END_SRC
    
*** Fonts
    =kitty= has very powerful font management. You can configure
    individual font faces and even specify special fonts for particular
    characters.
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      font_family      Hack Nerd Font Mono
      bold_font        auto
      italic_font      auto
      bold_italic_font auto

      #: Font size (in pts)
      font_size 11

      # To fix underscore rendering issues
      adjust_line_height 110%
    #+END_SRC
    
*** Cursor
    Block shaped cursor that does not blink.
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      cursor_shape block
      cursor_blink_interval 0
    #+END_SRC
    
*** Scrollback
    To reverse scroll direction, set a negative multiplier.
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      scrollback_lines 2000
      scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
      wheel_scroll_multiplier 5.0
    #+END_SRC
    
*** Mouse
    To reverse scroll direction, set a negative multiplier.
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      url_color #0087BD
      url_style curly

      #: The modifier keys to press when clicking with the mouse on URLs to
      #: open the URL
      open_url_modifiers kitty_mod

      open_url_with default
      copy_on_select no

      rectangle_select_modifiers ctrl+alt

      # double click to select a word
      select_by_word_characters :@-./_~?&=%+#
      click_interval 0.5

      # auto hide mouse cursor
      mouse_hide_wait 3.0
    #+END_SRC
    
*** Performance tuning
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      # ~100 FPS, while sync screen updates to the refresh rate of the monitor
      repaint_delay 10
      sync_to_monitor yes

      # input delay, increase this if screen flickers
      input_delay 3
    #+END_SRC
    
*** Terminal bell
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      enable_audio_bell yes
      bell_on_tab yes

      # disable visual bell (screen flash)
      visual_bell_duration 0.0

      # Request window attention on bell. Makes the dock icon bounce on
      # macOS or the taskbar flash on linux.
      window_alert_on_bell yes
    #+END_SRC
    
*** Window layout
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      remember_window_size  yes
      initial_window_width  640
      initial_window_height 400

      # For layouts, see https://sw.kovidgoyal.net/kitty/index.html#layouts.
      enabled_layouts *

      window_resize_step_cells 2
      window_resize_step_lines 2

      window_border_width 1.0
      draw_minimal_borders yes
      window_margin_width 0.0
      window_padding_width 0.0

      active_border_color #00ff00
      inactive_border_color #cccccc
      bell_border_color #ff5a00

      inactive_text_alpha 0.85
    #+END_SRC
    
*** Tab bar
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      tab_bar_edge top
      tab_bar_margin_width 0.0
      tab_bar_style fade
      tab_fade 0.25 0.5 0.75 1

      active_tab_foreground   #000
      active_tab_background   #eee
      active_tab_font_style   bold-italic
      inactive_tab_foreground #444
      inactive_tab_background #999
      inactive_tab_font_style normal
    #+END_SRC
    
*** Color scheme
    About the opacity of the background: A number between 0 and 1, where 1 is
    opaque and 0 is fully transparent.  This will only work if
    supported by the OS (for instance, when using a compositor under
    X11). Note that it only sets the default background color's
    opacity. This is so that things like the status bar in vim,
    powerline prompts, etc. still look good.  But it means that if you
    use a color theme with a background color in your editor, it will
    not be rendered as transparent.  Instead you should change the
    default background color in your kitty config and not use a
    background color in the editor color scheme. Or use the escape
    codes to set the terminals default colors in a shell script to
    launch your editor.  Be aware that using a value less than 1.0 is a
    (possibly significant) performance hit.

    If you want to dynamically
    change transparency of windows set dynamic_background_opacity to
    yes (this is off by default as it has a performance cost)
    
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      background              #fdf6e3
      foreground              #657b83 
      cursor                  #586e75

      selection_background    #93a1a1
      selection_foreground    #586e75 

      # black dark/light
      color0                #073642
      color8                #002b36

      # red dark/light
      color1                #dc322f
      color9                #cb4b16

      # green dark/light
      color2                #859900
      color10               #586e75

      # yellow dark/light
      color3              #b58900
      color11             #657b83

      # blue dark/light
      color4                #268bd2
      color12               #839496

      # magenta dark/light
      color5                #d33682
      color13               #6c71c4

      # cyan dark/light
      color6                #2aa198
      color14               #93a1a1

      # white dark/light
      color7                #eee8d5
      color15               #fdf6e3

      background_opacity         1.0
      dynamic_background_opacity no

      dim_opacity 0.75
    #+END_SRC
    
*** Advanced
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      editor nvim
    #+END_SRC
    
*** OS specific tweaks
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      macos_titlebar_color system
      macos_hide_titlebar yes
      macos_option_as_alt yes
      macos_hide_from_tasks no
      macos_quit_when_last_window_closed yes
      macos_window_resizable yes
      macos_thicken_font 0
      macos_traditional_fullscreen no
      macos_custom_beam_cursor no

      x11_hide_window_decorations yes
    #+END_SRC
*** OS specific tweaks
    For a list of key names, see: GLFW keys
    <http://www.glfw.org/docs/latest/group__keys.html>. The name to use
    is the part after the GLFW_KEY_ prefix. For a list of modifier
    names, see: GLFW mods
    <http://www.glfw.org/docs/latest/group__mods.html>

    On Linux you can also use XKB key names to bind keys that are not
    supported by GLFW. See XKB keys
    <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
    keysyms.h> for a list of key names. The name to use is the part
    after the XKB_KEY_ prefix. Note that you should only use an XKB key
    name for keys that are not present in the list of GLFW keys.

    Finally, you can use raw system key codes to map keys. To see the
    system key code for a key, start kitty with the kitty --debug-
    keyboard option. Then kitty will output some debug text for every
    key event. In that text look for ``native_code`` the value of that
    becomes the key name in the shortcut.

    NOTE: The hints kitten has many more modes of operation that I don't make
    use of as of right now.
    #+BEGIN_SRC conf :tangle ~/.config/kitty/kitty.conf
      kitty_mod ctrl+shift

      # remove default shorcuts
      clear_all_shortcuts yes

      map kitty_mod+c  copy_to_clipboard
      map kitty_mod+v  paste_from_clipboard
      map kitty_mod+s  paste_from_selection
      map shift+insert paste_from_selection
      map kitty_mod+o  pass_selection_to_program

      map kitty_mod+up        scroll_line_up
      map kitty_mod+k         scroll_line_up
      map kitty_mod+down      scroll_line_down
      map kitty_mod+j         scroll_line_down
      map kitty_mod+page_up   scroll_page_up
      map kitty_mod+page_down scroll_page_down
      map kitty_mod+home      scroll_home
      map kitty_mod+end       scroll_end
      map kitty_mod+h         show_scrollback

      map kitty_mod+enter new_window
      map kitty_mod+n new_os_window
      map kitty_mod+q close_window

      map kitty_mod+] next_window
      map kitty_mod+[ previous_window
      map kitty_mod+f move_window_forward
      map kitty_mod+b move_window_backward
      map kitty_mod+` move_window_to_top
      map kitty_mod+r start_resizing_window

      map kitty_mod+1 first_window
      map kitty_mod+2 second_window
      map kitty_mod+3 third_window

      map kitty_mod+alt+h neighboring_window left
      map kitty_mod+alt+l neighboring_window right
      map kitty_mod+alt+j neighboring_window down
      map kitty_mod+alt+k neighboring_window up

      map kitty_mod+right next_tab
      map kitty_mod+left  previous_tab
      map kitty_mod+t     new_tab
      map kitty_mod+w     close_tab
      map kitty_mod+.     move_tab_forward
      map kitty_mod+,     move_tab_backward
      map kitty_mod+alt+t set_tab_title

      map ctrl+t new_tab !neighbor
      map alt+1 goto_tab 1
      map alt+2 goto_tab 2
      map alt+3 goto_tab 3

      map kitty_mod+equal     change_font_size all +2.0
      map kitty_mod+minus     change_font_size all -2.0
      map kitty_mod+backspace change_font_size all 0

      #: Open a currently visible URL using the keyboard. The program used
      #: to open the URL is specified in open_url_with.
      map kitty_mod+e kitten hints

      map kitty_mod+f11    toggle_fullscreen
      map kitty_mod+u      kitten unicode_input
      map kitty_mod+f2     edit_config_file
      map kitty_mod+escape kitty_shell window
    #+END_SRC
    
** Neovim
*** Front-matter
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      " DO NOT EDIT
      " This file is generated by conf.org from xywei/conforg,
      " all changes will be overwritten.
    #+END_SRC
    
*** Detect Platform
    Assign the results to `s:uname`.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      if has('unix')
	let s:uname = system("uname")
	" Assume that llvm is installed via homebrew on MacOS
	" brew install llvm --with-clang
	if s:uname == "Darwin\n"
	  let g:chromatica#libclang_path='/usr/local/opt/llvm/lib/libclang.dylib'
	endif
	" Assme that this a an Arch linux, using clang from pacman
	if s:uname == "Linux\n"
	  " libclang in miniconda takes priority
	  if filereadable("~/miniconda3/lib/libclang.so")
	    let g:chromatica#libclang_path='~/miniconda3/lib/libclang.so'
	  elseif filereadable("/usr/lib/libclang.so")
	    let g:chromatica#libclang_path='/usr/lib/libclang.so'
	  endif
	endif
      endif
    #+END_SRC

*** Vim-Plug General Plugin List
    Install plugins under `.vim/plugged`.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      call plug#begin('~/.vim/plugged')
    #+END_SRC
    
    Vim-airline.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'vim-airline/vim-airline'
      Plug 'vim-airline/vim-airline-themes'
    #+END_SRC
    
    VOom: an outliner based on folding marks.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'vim-voom/VOoM'
    #+END_SRC
    
    A code minimap that resembles Sublime text.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'severin-lemaignan/vim-minimap'
    #+END_SRC
    
    Syntax highlighting for prm files.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'xywei/vim-dealii-prm'
    #+END_SRC
    
    Neomake (note: do not use it with other async
    frameworks like ale).
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'neomake/neomake'
    #+END_SRC
    
    Neoformat
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'sbdchd/neoformat'
    #+END_SRC

    Help visually display indent levels
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'nathanaelkane/vim-indent-guides'
    #+END_SRC
    
    Display ansi escape sequences in a readable way
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'IngoHeimbach/vim-plugin-AnsiEsc'
    #+END_SRC
    
    Tag bar.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'majutsushi/tagbar'
    #+END_SRC

    Deoplete. Update remote plugins when load.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      function! DoRemote(arg)
	UpdateRemotePlugins
      endfunction
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    #+END_SRC
    
    UltiSnips.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'SirVer/ultisnips'
    #+END_SRC
    
    CtrlP.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'ctrlpvim/ctrlp.vim'
    #+END_SRC
    
    NerdTree with lazy loading.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
    #+END_SRC
    
    Easy align.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'junegunn/vim-easy-align'
    #+END_SRC

    Enable stuff like ds, cs and yss
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'tpope/vim-surround'
    #+END_SRC

    Auto comment manipulation.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'tpope/vim-commentary'
    #+END_SRC
    
    Match pairs of quotes etc.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'Raimondi/delimitMate'
    #+END_SRC
    
    Enhance undo functionality.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'mbbill/undotree'
    #+END_SRC

    Tmux statusline generator
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'edkolev/tmuxline.vim'
    #+END_SRC

    Use tmux nav keys to navigate.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'christoomey/vim-tmux-navigator'
    #+END_SRC

    Always load vim-devicons at last.
    (vim-plug loads the plugins in the same order as they are registered)
    The terminal's font must be set as one of the nerd-fonts
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'ryanoasis/vim-devicons'
    #+END_SRC

*** Plugin Parameters
**** TagBar
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:tagbar_width = 50
      let g:tagbar_type_tex = {
	    \ 'ctagstype' : 'latex',
	    \ 'kinds'     : [
	    \ 's:sections',
	    \ 'g:graphics:1',
	    \ 'l:labels:1',
	    \ 'r:refs:1',
	    \ 'p:pagerefs:1'
	    \ ],
	    \ 'sort'    : 0
	    \ }
    #+END_SRC

**** CtrlP
     Ignore certain file types.
     (Install `ag` from `community/the_silver_searcher`.)
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:ctrlp_cmd = 'CtrlP'
      let g:ctrlp_working_path_mode = 'ra'
      set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.gz
      let g:ctrlp_user_command = 'ag %s -l --nocolor --skip-vcs-ignores --hidden -g ""'
    #+END_SRC

**** Neoformat
     If using other formatting plugin, define noNeoformat for
     that file type (for example, yapf for Python).
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      if !exists('b:noNeoformat')
	nnoremap <buffer><Leader>= :<C-u>Neoformat<CR>
	vnoremap <buffer><Leader>= :Neoformat<CR>
      endif
    #+END_SRC

    - Enable basic formatting when a filetype is not found. Disabled by default.
    - Enable alignment
    - Enable tab to spaces conversion
    - Enable trimmming of trailing whitespace
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:neoformat_basic_format_align = 1
      let g:neoformat_basic_format_retab = 1
      let g:neoformat_basic_format_trim = 1
    #+END_SRC

**** Vim-Commentary
     Set commentstring for files not supported by default
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      autocmd FileType apache setlocal commentstring=#\ %s
    #+END_SRC

**** Vim-Devicons
     Enable the plugin
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:webdevicons_enable = 1
      set encoding=utf8
    #+END_SRC

    Add integration with
    - NERDTree
    - vim-airline
    - CtrlP
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:webdevicons_enable_nerdtree = 1
      let g:webdevicons_conceal_nerdtree_brackets = 1

      let g:webdevicons_enable_airline_tabline = 1
      let g:webdevicons_enable_airline_statusline = 1

      let g:webdevicons_enable_ctrlp = 1
    #+END_SRC
    
    And some tweaks. Including:
    - use double-width(1) or single-width(0) glyphs
      only manipulates padding, has no effect on terminal or set(guifont) font
    - the amount of space to use after the glyph character (default ' ')
    - force extra padding in NERDTree so that the filetype icons line up vertically
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
      let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
      let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
    #+END_SRC

**** delimitMate
    Do not automatically close stuff.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let delimitMate_autoclose = 0
    #+END_SRC

**** UltiSnips
     Use <tab> to expand snippets.
     #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
       let g:UltiSnipsExpandTrigger="<tab>"
       let g:UltiSnipsJumpForwardTrigger="<tab>"
       let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
       let g:UltiSnipsListSnippets="<c-u>"
       let g:UltiSnipsEditSplit="vertical"
     #+END_SRC

*** Auto-completion
    Ways to do auto-completion:
    1. vim's defaualt keybindings, among which the
       awesome ones are:
       - Ctrl+x Ctrl+n  Just this file
       - Ctrl+x Ctrl+f  For filenames (under var path)
       - Ctrl+x Ctrl+]  For tags

       - Ctrl+n         Everything specified by the 'complete' option

    2. vim's omnifunc Ctrl+x Ctrl+o
       (often too verbose)

    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set omnifunc=syntaxcomplete#Complete
    #+END_SRC

    3. Deoplete plugin Ctrl+l (clang/jedi based)
       
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:deoplete#enable_at_startup = 1
      let g:deoplete#disable_auto_complete = 0
      let g:deoplete#omni#input_patterns = {}
      inoremap <silent><expr><C-l> deoplete#mappings#manual_complete()
      autocmd CompleteDone * pclose
    #+END_SRC

*** Language-Specific Plugins
**** Python
    Install `jedi` through `pip` first.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      Plug 'zchee/deoplete-jedi'
    #+END_SRC
    
    Options
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:deoplete#sources#jedi#statement_length = 50
      let g:deoplete#sources#jedi#enable_typeinfo = 1
      let g:deoplete#sources#jedi#show_docstring = 1
    #+END_SRC

*** Key Maps
**** Toggle outline using VOom
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      nnoremap <Leader>v :VoomToggle<cr>
      nnoremap <Leader>o :VoomToggle<cr>
    #+END_SRC

**** Set how airline looks and tmux integration
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:airline_powerline_fonts = 1
      let g:airline_theme='sol'
      let g:airline#extensions#tabline#enabled = 1
      let g:airline#extensions#tmuxline#enabled = 1
      let g:airline#extensions#tmuxline#snapshot_file = "~/.tmux-statusline-colors.conf"
    #+END_SRC
    
**** Toggle tag bar
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      nmap <Leader>t :TagbarToggle<cr>
      nmap tb :TagbarToggle<cr>
    #+END_SRC
    
**** Start fuzzy search
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:ctrlp_map = '<c-p>'
    #+END_SRC

**** Start interactive EasyAlign
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      xmap ga <Plug>(EasyAlign)
      nmap ga <Plug>(EasyAlign)
      xmap <Leader>a <Plug>(EasyAlign)
      nmap <Leader>a <Plug>(EasyAlign)
    #+END_SRC
    
**** Toggle nerd-tree
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      map <C-n> :NERDTreeToggle<CR>
      nmap <Leader>f :NERDTreeToggle<cr>
    #+END_SRC
    
*** Add Plugins to Runtimepath
    Note that some configurations have to
    go after this.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      call plug#end()
    #+END_SRC

*** Neomake
    Auto-run when writing or reading a buffer,
    and on changes in insert and normal mode
    (after 1s; no delay when writing).
    Must be used after loading Neomake.
   #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
     call neomake#configure#automake('nrwi', 500)
   #+END_SRC

*** Find Cursor
    Lost track of cursor?
    Press `<Leader> + K`!
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white
      hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white
      function FindCursor()
	if !exists("s:highlightcursor")
	  let s:highlightcursor=1
	  set cursorline
	  set cursorcolumn
	else
	  unlet s:highlightcursor
	  set nocursorline
	  set nocursorcolumn
	endif
      endfunction
      nnoremap <Leader>K :call FindCursor()<CR>
      nnoremap <Leader>k :call FindCursor()<CR>
    #+END_SRC

*** Code Formatting
**** Python
     Run through `black` and then `docformatter`.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:neoformat_enabled_python = ['black', 'docformatter']
      let g:neoformat_run_all_formatters = 1
    #+END_SRC

**** C/C++
     Clang-format is used.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:neoformat_enabled_c = ['clangformat']
      let g:neoformat_enabled_cpp = ['clangformat']
    #+END_SRC

*** Kill Trailing Spaces
    Defines two commands to work with
    trailing spaces:

    1. `ShowSpaces`
    2. `TrimSpaces`

    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      function ShowSpaces(...)
	let @/='\v(\s+$)|( +\ze\t)'
	let oldhlsearch=&hlsearch
	if !a:0
	  let &hlsearch=!&hlsearch
	else
	  let &hlsearch=a:1
	end
	return oldhlsearch
      endfunction

      function TrimSpaces() range
	let oldhlsearch=ShowSpaces(1)
	execute a:firstline.",".a:lastline."substitute ///gec"
	let &hlsearch=oldhlsearch
      endfunction

      command -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
      command -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
    #+END_SRC

*** Line Numbers
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set relativenumber
      set number
    #+END_SRC

*** Swap Files
    Turn off swap files (often troubsome,
    for example, when in shared folders)
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set noswapfile
    #+END_SRC

    Auto-reload files changed outside vim
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set autoread
    #+END_SRC

*** Tag Files
    A command to make tags for the project
    After generating the tags, use
    - Ctrl+] to jump to tag
    - g Ctrl+] to list all matches
    - Ctrl+t to jump back
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      command! MakeTags !ctags -R .
    #+END_SRC

*** Undotree
    Replace the built-in undo.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      nnoremap <leader>u :UndotreeToggle<cr>
    #+END_SRC

    Enable persistent undo as recommended
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      if has("persistent_undo")
	set undodir=~/.undodir/
	set undofile
      endif
    #+END_SRC

*** Additional Settings
    Enable mouse.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set mouse=a
    #+END_SRC
    
    File type system.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      filetype plugin indent on
    #+END_SRC

    Use spaces instead of tabs.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set tabstop=2 shiftwidth=2 expandtab
    #+END_SRC
    
    Disable tumx nav mappings. (Configure nav keys on the tmux side.)
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      let g:tmux_navigator_no_mappings = 1
    #+END_SRC

    Use system clipboard ("^=" means prepend).
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      if (executable('pbcopy') || executable('xclip') || executable('xsel')) && has('clipboard')
	set clipboard^=unnamed,unnamedplus
      endif
    #+END_SRC

    Add snippets from ConfOrg.
    FIXME: UltiSnipsSnippetDirectories does not work with noweb.
    #+BEGIN_SRC conf :noweb yes :tangle ~/.config/nvim/init.vim
      set runtimepath+=<<conforg-dir>>/contrib/nvim-snips
      let g:UltiSnipsSnippetDirectories=[$HOME.'/.conforg/contrib/nvim-snips']
    #+END_SRC

    Set python interpreter on MacOS (ignore virtualenv and conda)
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      if s:uname == "Darwin\n"
	let g:python_host_prog='/usr/local/bin/python2'
	let g:python3_host_prog='/usr/local/bin/python3'
      endif
    #+END_SRC

    Set python interpreter on Linux (ignore virtualenv and conda)
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      if s:uname == "Linux\n"
	let g:python_host_prog='/usr/bin/python2'
	let g:python3_host_prog='/usr/bin/python3'
      endif
    #+END_SRC

    Display all matchings when we do tab complete
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
    set wildmenu
    #+END_SRC

    Use markers to fold
    also enable space to trigger the fold in normal mode
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set foldmethod=marker
      nnoremap <space> za
    #+END_SRC

    Make highlighted text more readable.
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      hi Search cterm=None ctermbg=blue ctermfg=white
    #+END_SRC
    
    Smooth scrolling
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set scrolloff=4
      set nolazyredraw
    #+END_SRC

    Change the cursor shape in the terminal
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      :let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
    #+END_SRC

    Turn off blink in normal mode
    #+BEGIN_SRC conf :tangle ~/.config/nvim/init.vim
      set gcr=n:blinkon0
    #+END_SRC
    
** NewsBoat
*** Front-matter
    #+BEGIN_SRC conf :tangle ~/.newsboat/config
      # DO NOT EDIT
      # This file is generated by conf.org from xywei/conforg,
      # all changes will be overwritten.
    #+END_SRC
    
*** Basic setup
    Use =Chromium= instead of default =Lynx=.
    #+BEGIN_SRC conf :tangle ~/.newsboat/config
      browser chromium
    #+END_SRC
    
    Notifications setting.
    #+BEGIN_SRC conf :tangle ~/.newsboat/config
      notify-always yes
      notify-format "newsboat: %n unread articles within %f unread feeds"
      notify-program notify-send
      notify-xterm yes
      notify-screen yes
    #+END_SRC
    
    Keybindings resembling Vim/Ranger.
    Remember to unbind keys first to avoid collision.
    #+BEGIN_SRC conf :tangle ~/.newsboat/config
      unbind-key h
      unbind-key j
      unbind-key k
      unbind-key l
      unbind-key g
      unbind-key G

      bind-key h quit
      bind-key j down
      bind-key k up
      bind-key l open
      bind-key g home
      bind-key G end
    #+END_SRC
    
*** Color Scheme
    #+BEGIN_SRC conf :tangle ~/.newsboat/config
      articlelist-format "%4i %f %D  %?T?|%-17T| ?%t"

      highlight feedlist    "^  *[0-9]+  *N  "                    color156 default
      highlight articlelist "^  *[0-9]+  *N  "                    color156 default

      highlight article     "(^Feed:.*|^Title:.*|^Author:.*)"     color75  default
      highlight article     "(^Link:.*|^Date:.*)"                 color75  default
      highlight article     "^Podcast Download URL:.*"            color71  default
      highlight article     "^Links:"                             white    color240 underline
      highlight article     "\\[[0-9][0-9]*\\]"                   color72  default  bold
      highlight article     "\\[image [0-9][0-9]*\\]"             color72  default  bold
      highlight article     "\\[embedded flash: [0-9][0-9]*\\]"   color72  default  bold
      highlight article     ":.*\\(link\\)$"                      color74  default
      highlight article     ":.*\\(image\\)$"                     color74  default
      highlight article     ":.*\\(embedded flash\\)$"            color74  default

      color listnormal                                            white    default
      color listfocus                                             default  color240
      color info                                                  default  color240
    #+END_SRC
    
** Taskwarrior
*** The Common Header.
   #+BEGIN_SRC conf :tangle ~/.taskrc
     # DO NOT EDIT
     # This file is generated by conf.org from xywei/conforg,
     # all changes will be overwritten.
   #+END_SRC

   Taskwarrior generates a `.taskrc` if the
   file does not exist.
   #+BEGIN_SRC conf :tangle ~/.taskrc
     #
     # Taskwarrior program configuration file.
     # For more documentation, see http://taskwarrior.org or try 'man task', 'man task-color',
     # 'man task-sync' or 'man taskrc'
     #
     # By removing this file and running
     # $ task
     # you can ask for a freshly generated config file.
     #
   #+END_SRC
   
*** Data Location
   #+BEGIN_SRC conf :tangle ~/.taskrc
     data.location=~/.task
   #+END_SRC
   
*** Color Theme
   #+BEGIN_SRC conf :tangle ~/.taskrc
     include TASKWARRIOR_COLOR_THEME
   #+END_SRC

*** Sync Server
    For the setup to be complete, `password-store` needs to be setup in advance.
    Otherwise `task sync` will not be usable.
   #+BEGIN_SRC conf :tangle ~/.taskrc
     taskd.certificate=ABSOLUTE_ESCAPED_HOME_DIR\/.task\/xywei.cert.pem
     taskd.key=ABSOLUTE_ESCAPED_HOME_DIR\/.task\/xywei.key.pem
     taskd.ca=ABSOLUTE_ESCAPED_HOME_DIR\/.task\/ca.cert.pem
     taskd.server=TASKD_SERVER_ADDR
     taskd.credentials=WXYZG\/Xiaoyu Wei\/TASKD_SERVER_USER_KEY
   #+END_SRC
   
** Tmux
*** Basic Settings.
   Note: this config does not unset all default keybindings, for example,
   #+BEGIN_SRC conf :tangle no
     bind-key          d detach-client
     bind-key          0 select-window -t :0
     bind-key          1 select-window -t :1
     bind-key          2 select-window -t :2
     bind-key          3 select-window -t :3
     bind-key          4 select-window -t :4
     bind-key          5 select-window -t :5
     bind-key          6 select-window -t :6
     bind-key          7 select-window -t :7
     bind-key          8 select-window -t :8
     bind-key          9 select-window -t :9
     bind-key          : command-prompt
     bind-key          ? list-keys
     bind-key          i display-message
     bind-key          { swap-pane -U
     bind-key          } swap-pane -D
     bind-key          v copy-mode
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     # DO NOT EDIT
     # This file is generated by conf.org from xywei/conforg,
     # all changes will be overwritten.
   #+END_SRC
   
   Better colors
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g default-terminal "screen-256color"
   #+END_SRC

   Increase scroll-back history.
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g history-limit 100000
   #+END_SRC

   Use vim key bindings.
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     setw -g mode-keys vi
   #+END_SRC

   Allow using mouse
   Note: this only works for tmux version >= 2.1
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g mouse on
   #+END_SRC

   Copy mouse-selected text to clipboard
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip" \; display-message "Copied to clipboard."
   #+END_SRC

   Decrease command delay (increase vim responsiveness)
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g escape-time 1
   #+END_SRC

   Setup 'v' to begin selection
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind-key -T copy-mode-vi v send -X begin-selection
   #+END_SRC

   Increase repeat time for repeatable commands
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g repeat-time 1000
   #+END_SRC

   Start window and pane index at 1
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g base-index 1
     set -g pane-base-index 1
   #+END_SRC

   Highlight window when it has new activity
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     setw -g monitor-activity on
     set -g visual-activity on
   #+END_SRC

   Automatic renumber/rename windows
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g renumber-windows on
     set -g automatic-rename on
   #+END_SRC
*** Clipboard
    A nice article explaining clipboards: https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
     bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
   #+END_SRC

*** Look and Feel
   Set terminal title
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g set-titles on
     set -g set-titles-string '#h ❐ #S ● #I #W'
   #+END_SRC
 
   Slightly longer pane indicators/status messages display time
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g display-panes-time 800
     set -g display-time 1000
   #+END_SRC

   24 hour clock
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     setw -g clock-mode-style 24
   #+END_SRC

   Rather than constraining window size to the maximum size of any client
   connected to the *session*, constrain window size to the maximum size of any
   client connected to *that window*. Much more reasonable.
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     setw -g aggressive-resize on
   #+END_SRC
   
   Status bar
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set-option -g status on
     set -g status-position bottom
     set -g status-attr dim
     set -g status-interval 2
     set -g status-justify left
   #+END_SRC
   

   Show host name, session, window, pane in the left
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g status-left-length 50
     set -g status-left ' '
   #+END_SRC

   Date and time on right side
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g status-right-length 60
     set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
   #+END_SRC

   From tmuxline.vim. If the snapshot file is not present,
   load a defualt one.
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     if-shell "test -f ~/cli-utils/tmuxline" "source ~/cli-utils/tmuxline"
     if-shell "test -f ~/.tmux-status.conf" "source ~/.tmux-status.conf"
   #+END_SRC
   
   Bold messages
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g message-attr bold
     setw -g mode-attr bold
   #+END_SRC

*** Key Bindings
   Tmux prefix: `C-j` for usual sessions, `C-k` for nested sessions.
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     unbind C-b
     set -g prefix 'C-j'
     bind-key -n 'C-k' send-prefix
   #+END_SRC

   Quickly reload .tmux.conf
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     unbind r
     bind r source-file ~/.tmux.conf \; display "Reloaded!"
   #+END_SRC

   New window
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind t new-window
   #+END_SRC

   Window splitting: `|` vertical, `-` horizontal
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     unbind %
     bind | split-window -h -c "#{pane_current_path}"
     unbind '"'
     bind - split-window -v -c "#{pane_current_path}"
   #+END_SRC

   Enhanced C-l that now clears both screen and history
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind ` send-keys C-l \; run 'tmux clear-history'
   #+END_SRC

   For vim-tmux-navigator.
   Smart pane switching with awareness of Vim splits.
   See: https://github.com/christoomey/vim-tmux-navigator
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
         | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
   #+END_SRC

   Caveat: only works in normal mode
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind h if-shell "$is_vim" "send-keys :TmuxNavigateLeft Enter"  "select-pane -L"
     bind j if-shell "$is_vim" "send-keys :TmuxNavigateDown Enter"  "select-pane -D"
     bind k if-shell "$is_vim" "send-keys :TmuxNavigateUp Enter"  "select-pane -U"
     bind l if-shell "$is_vim" "send-keys :TmuxNavigateRight Enter"  "select-pane -R"
     bind \ if-shell "$is_vim" "send-keys :TmuxNavigatePrevious Enter" "select-pane -l"
   #+END_SRC

   Resize panes
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind H resize-pane -L 5
     bind J resize-pane -D 5
     bind K resize-pane -U 5
     bind L resize-pane -R 5
   #+END_SRC

   Repeat last shell command on the right pane (if
   it happens to be a shell)
   binding to "m" for "make"
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind m select-pane -t 2 \; \
       send-keys q C-c C-m clear C-m \
       tmux Space clear-history C-m \
       Up Up Up C-m \; \
       last-pane
   #+END_SRC

   Enter copy-mode
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind-key -n C-q copy-mode
   #+END_SRC

   History navigation
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind-key -T copy-mode-vi Home send -X history-top
     bind-key -T copy-mode-vi End send -X history-bottom
     bind-key -T copy-mode-vi -n S-PPage send -X halfpage-up
     bind-key -T copy-mode-vi -n S-NPage send -X halfpage-down
   #+END_SRC

   Swap right pane in window 1 with default pane in window 2,
   binding to "p" for "pane_swap".
   Make sure our current window is listed as 1
   - create a second window if it does not exist
   - select our 1 window again in case we created a new one
   - select our 2nd pane in 1 window
   - join that pane to window 2
   - select the pane above the one we just moved there
   - move that pane to window 1
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind p \
     if-shell 'tmux select-window -t :1' '' 'move-window -t :1' \; \
     if-shell 'test $(tmux list-panes | wc -l) -gt 1' '' 'split-window -h' \; \
     if-shell 'tmux select-window -t :2' '' 'new-window' \; \
     select-window -t 1 \; \
     select-pane -t 2 \; \
     join-pane -t 2.1 \; \
     select-pane -U \; \
     join-pane -h -t 1.1 \; \
     last-pane
   #+END_SRC
   
   Clock
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind-key          c clock-mode
   #+END_SRC

   Show pane indicators
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     bind-key          p display-panes
   #+END_SRC

*** Tmux Plugin Manager (TPM)
   Hit `prefix + I` to fetch the plugins and source them.
   Hit `prefix + U` to update plugins.

   List of plugins
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     set -g @plugin 'tmux-plugins/tpm'
     set -g @plugin 'tmux-plugins/tmux-resurrect'
     set -g @plugin 'tmux-plugins/tmux-open'
   #+END_SRC

   Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
   #+BEGIN_SRC conf :tangle ~/.tmux.conf
     run '~/.tmux/plugins/tpm/tpm'
   #+END_SRC
** Ranger
*** rc.conf
    #+BEGIN_SRC conf :tangle ~/.config/ranger/rc.conf
     # DO NOT EDIT
     # This file is generated by conf.org from xywei/conforg,
     # all changes will be overwritten.
    #+END_SRC
   
    Use the custom theme and enable image previews.
    For best experiences, set the terminal to use solarized light colors.
    #+BEGIN_SRC conf :tangle ~/.config/ranger/rc.conf
     set colorscheme custom
     set draw_borders true
     set line_numbers relative
    #+END_SRC
   
    Then there is a plugin that sets glyph for each file included in =contrib/=
    and is set up by running =install.sh=.

    For image preview, we use +`img2txt` from `libcaca`+ `w3m`
    #+BEGIN_SRC conf :tangle ~/.config/ranger/rc.conf
     set preview_images true
     set preview_images_method w3m
    #+END_SRC

** X Resources
*** Header
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      ! DO NOT EDIT
      ! This file is generated by conf.org from xywei/conforg,
      ! all changes will be overwritten.
    #+END_SRC
*** Color
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      !! The default colors are "Gruvbox":
      ,*.color0: #1d2021
      ,*.color1: #cc241d
      ,*.color2: #98971a
      ,*.color3: #d79921
      ,*.color4: #458588
      ,*.color5: #b16286
      ,*.color6: #689d6a
      ,*.color7: #a89984
      ,*.color8: #928374
      ,*.color9: #fb4934
      ,*.color10: #b8bb26
      ,*.color11: #fabd2f
      ,*.color12: #83a598
      ,*.color13: #d3869b
      ,*.color14: #8ec07c
      ,*.color15: #ebdbb2

      !! Transparency (0-255):
      ,*.alpha: 230

      !! Set a default font and font size as below:
      !! *.font: Monospace-11;
    #+END_SRC
    
*** URXVT
    Scrolling control
    #+BEGIN_SRC conf :tangle "~/.Xresources"
    ! do not scroll with output
    URxvt*scrollTtyOutput: false

    ! scroll in relation to buffer (with mouse scroll or Shift+Page Up)
    URxvt*scrollWithBuffer: true

    ! scroll back to the bottom on keypress
    URxvt*scrollTtyKeypress: true

    ! disable the scrollback buffer for the secondary screen
    URxvt*secondaryScreen: 1
    URxvt*secondaryScroll: 0

    ! hide scroll bar
    URxvt.scrollBar: false
    #+END_SRC
    
    Fonts installed from:
    - WenQuanYi Zen Hei (Chinese) font from =any/wqy-zenhei=
    - WenQuanYi Micro Hei (Chinese) font from =any/wqy-microhei=
    - Nerd fonts from =aur/nerd-fonts-complete=
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      URxvt.font: xft:Inconsolata Nerd Font Mono:pixelsize=20:minspace=False,xft:WenQuanYi Micro Hei Mono:pixelsize=20,xft:WenQuanYi Zen Hei Mono:pixelsize=20,xft:DejaVu Sans Mono Nerd Font Complete:pixelsize=20:minspace=False
      URxvt*letterSpace: 0
    #+END_SRC
*** High DPI
    i3-status and i3's window decorations respect Xresources.
    NOTE: =dpi= can be changed through =-d= option of =install.sh=.
    #+BEGIN_SRC conf :tangle "~/.Xresources"
      Xft.dpi: 150
      Xft.autohint: 0
      Xft.lcdfilter:  lcddefault
      Xft.hintstyle:  hintfull
      Xft.hinting: 1
      Xft.antialias: 1
      Xft.rgba: rgb
    #+END_SRC

** Xmodmap
   Map Capslock to be Esc
   #+BEGIN_SRC conf :tangle "~/.Xmodmap"
     clear Lock
     keycode 0x42=Escape
   #+END_SRC

** Zsh
*** General Information
   This section contains configurations for zshell. To change the default shell
   for the current user, run
   #+BEGIN_SRC sh :tangle no
     chsh -s /bin/zsh
   #+END_SRC
   
   I am not using any framework for my configurations. If you are new to zsh,
   you will probably be interested in checking out one of them, e.g., oh-my-zsh.
   
   A way to profile the startup time as explained in [[https://kev.inburke.com/kevin/profiling-zsh-startup-time/][this blog post]] is to use
   this snippet at the start of =zshrc=:
   #+NAME: start-profiling
   #+BEGIN_SRC sh :results output :exports none :tangle no
     PROFILE_STARTUP=false
     if [[ "$PROFILE_STARTUP" == true ]]; then
	 PS4=$'%D{%M%S%.} %N:%i> '
	 mkdir -p $HOME/tmp
	 exec 3>&2 2>$HOME/tmp/startlog.$$
	 setopt xtrace prompt_subst
     fi
   #+END_SRC
   
   And then add this at the end:
   #+NAME: stop-profiling
   #+BEGIN_SRC sh :results output :exports none :tangle no
     if [[ "$PROFILE_STARTUP" == true ]]; then
	 unsetopt xtrace
	 exec 2>&3 3>&-
     fi
   #+END_SRC
   
   The output file can be processed using [[ ][this script]].

*** Pass in meta-configurations
    #+BEGIN_SRC sh :noweb yes :tangle "~/.zshrc"
      # DO NOT EDIT
      # This file is generated by conf.org from xywei/conforg,
      # all changes will be overwritten.
      
      <<start-profiling>>

      export CONFORG_DIR=<<conforg-dir>>
      export CONDA_DIR=<<conda-dir>>
      export CLI_UTILS_DIR=<<cli-utils-dir>>
    #+END_SRC

*** Basic setup
    Do nothing if not running interactively
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      case $- in
	  ,*i*) ;;
	    ,*) return;;
      esac
    #+END_SRC
    
    Use emacs mode
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      bindkey -e
    #+END_SRC
    
    Fix GPG complaints
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export GPG_TTY=$(tty)
    #+END_SRC

*** Bash insulter
    Just to add some fun..
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if [ -f $CONFORG_DIR/contrib/bash-insulter/src/bash.command-not-found ]; then
	source $CONFORG_DIR/contrib/bash-insulter/src/bash.command-not-found
      fi
    #+END_SRC

*** Frequently Used Paths
    Saves the need to type full paths.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      setopt auto_cd
      cdpath=($HOME/Nextcloud $HOME/Research)
    #+END_SRC

*** Environment variables
    Set PATH to include:
    - cli-utils: my scripts
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export PATH=$CLI_UTILS_DIR:$PATH
    #+END_SRC
    
    Set default editor to be neovim
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export EDITOR="nvim"
      export VISUAL="nvim"
    #+END_SRC
    
    Enable 256 color support in terminal
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export TERM=screen-256color
    #+END_SRC
    
    Allow using pip outside a virtual env
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export PIP_REQUIRE_VIRTUALENV=false
    #+END_SRC

*** Command history
    Save 1000 commands and enable history sharing among all terminals
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      SAVEHIST=1000
      HISTFILE=~/.zsh_history
      setopt inc_append_history
    #+END_SRC
    
*** Auto completion
    Enable completion by putting =compinit= at the end of the zshrc
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      autoload -Uz compinit
    #+END_SRC

    Git command autocomplete
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      GIT_COMPLETION_BASH=/usr/share/git/completion/git-completion.zsh
      if [ -f $GIT_COMPLETION_ZSH ]; then
	zstyle ':completion:*:*:git:*' script $GIT_COMPLETION_ZSH
      fi
    #+END_SRC
    
    Taskwarrior. For Arch Linux, install `community/task`.
    This also sets the alias `t`.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      zstyle ':completion:*:*:task:*' verbose yes
      zstyle ':completion:*:*:task:*:descriptions' format '%U%B%d%b%u'

      zstyle ':completion:*:*:task:*' group-name ''

      alias t=task
    #+END_SRC

*** Colorful aliases
    Enable color support of ls and also add handy aliases.
    MacOS's `ls` does not accept `--color`.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      case `uname` in
	Darwin)
	    # commands for OS X go here
	    alias ls='gls --color=auto'
	    alias dir='gdir --color=auto'
	    alias vdir='gvdir --color=auto'

	    alias grep='grep --color=auto'
	    alias fgrep='fgrep --color=auto'
	    alias egrep='egrep --color=auto'
      alias ctags='/usr/local/bin/ctags'
	;;
	Linux)
	  # commands for Linux go here
	    alias ls='ls --color=auto'
	    alias dir='dir --color=auto'
	    alias vdir='vdir --color=auto'

	    alias grep='grep --color=auto'
	    alias fgrep='fgrep --color=auto'
	    alias egrep='egrep --color=auto'
	;;
	FreeBSD)
	  # commands for FreeBSD go here
	;;
      esac
    #+END_SRC

*** Convenient aliases
    Some aliases for ls
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias ll='ls -alhF'
      alias la='ls -A'
      alias l='ls -CF'
    #+END_SRC
    
    Use =nvim= for everything
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias vi='nvim'
      alias vim='nvim'
    #+END_SRC
    
    Use Bash as the default shell for Emacs, due to compatibility issues for certain
    plugins.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias emacs='SHELL=/bin/bash emacs'
    #+END_SRC
    
    Force tmux to accept UTF-8
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      alias tmux='tmux -u'
    #+END_SRC
    
    A simple calculator. Alias =equal sign= disabled due to incompatibility with
    =zsh-sytax-highlighting=.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      autoload -U zcalc
      function __calc_plugin {
	  zcalc -e "$*"
      }
      aliases[calc]='noglob __calc_plugin'
      # aliases[=]='noglob __calc_plugin'
    #+END_SRC

*** Dircolors
    Solarized dircolors. Choices are:
    - dircolors.256dark
    - dircolors.ansi-dark
    - dircolors.ansi-light
    - dircolors.ansi-universal
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      export DIRCOLORTHEME='dircolors.256dark'
      export DIRCOLOR_DIR=$CONFORG_DIR/contrib/dircolors-solarized
      case `uname` in
	  Darwin)
	  # commands for OS X go here
	      eval `gdircolors $DIRCOLOR_DIR/${DIRCOLORTHEME:-dircolors.256dark}`
	  ;;
	  Linux)
	  # commands for Linux go here
	      eval `dircolors $DIRCOLOR_DIR/${DIRCOLORTHEME:-dircolors.256dark}`
	  ;;
	  FreeBSD)
	  # commands for FreeBSD go here
	  ;;
      esac
      zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
    #+END_SRC

*** End of zshrc
    Speed up zsh compinit by only checking cache once a day.
    On slow systems, checking the cached =.zcompdump= file to see if it must be 
    regenerated adds a noticable delay to zsh startup.
    This little hack restricts it to once a day.  
    Credit of this trick goes to [[https://gist.github.com/ctechols/ca1035271ad134841284][here]].

    The globbing is a little complicated here:
    - '#q' is an explicit glob qualifier that makes globbing work within zsh's [[ ]] construct.
    - 'N' makes the glob pattern evaluate to nothing when it doesn't match (rather than throw a globbing error)
    - '.' matches "regular files"
    - 'mh+24' matches files (or directories or whatever) that are older than 24 hours.

    #+BEGIN_SRC sh :tangle "~/.zshrc"
      for dump in $HOME/.zcompdump(N.mh+24); do
	  # echo "Updating completion cache.."
	  compinit
	  compdump
      done

      compinit -C
      compdef _task t=task
    #+END_SRC

    Kitty the terminal emulator of choice.
    The important thing here is to make sure the call to kitty to load the zsh
    completions happens after the call to compinit.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if type "kitty" > /dev/null; then
	  kitty + complete setup zsh | source /dev/stdin
      fi
    #+END_SRC
    
    Load syntax highlighting, which can be installed from
    =community/zsh-syntax-highlighting=.
    (It must be at the end of the =.zshrc= file).
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if [ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
	  source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
      fi
    #+END_SRC
    
    Stop profiling
    #+BEGIN_SRC sh :noweb yes :tangle "~/.zshrc"
      <<stop-profiling>>
    #+END_SRC
** Zathura
   This section contains configurations for =zathura=.
   - Use =J, K= to zoom.
   - Use =i= to invert colors.
   - Use =p= to print.
   #+BEGIN_SRC conf :tangle "~/.config/zathura/zathurarc"
     # DO NOT EDIT
     # This file is generated by conf.org from xywei/conforg,
     # all changes will be overwritten.

     set statusbar-h-padding 0
     set statusbar-v-padding 0
     set first-page-column 1
     set page-padding 1
     map K zoom in
     map J zoom out
     map i recolor
     map p print
    #+END_SRC
   
* Boneyard

This place is for configs that are gathered over time and are not ready
to land yet.
*** Conda
    Starting from conda 4.4 it uses `conda activate`, which is nice
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if [ -f $CONDA_DIR/etc/profile.d/conda.sh ]; then
	  . $CONDA_DIR/etc/profile.d/conda.sh
      fi
    #+END_SRC
    
    Conda commands autocompletion, making startup much slower
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      fpath+=$CONFORG_DIR/contrib/conda-zsh-completion
      compinit conda
      zstyle ':completion::complete:*' use-cache 1
    #+END_SRC

*** Prompt line
    When there is a custom promptline script, load it
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      if [ -f $CLI_UTILS_DIR/promptline ]; then
	source $CLI_UTILS_DIR/promptline
      fi
    #+END_SRC

*** Keyboard (Delete, Meta, PageUp etc.)
    Setup zkbd to use some keys in zsh. It prompts for an interactive setup when
    used for the first time. Note that the file generated sometimes does not
    have the correct filename.
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      autoload zkbd
      [[ ! -f ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE ]] && zkbd
      source ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE

      [[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
      [[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
      [[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
      [[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" up-line-or-history
      [[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
      [[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
      [[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" down-line-or-history
      [[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-search
      [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
      [[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-search
      [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
    #+END_SRC

*** Theme: PowerLevel9k
    Theme settings
    #+BEGIN_SRC sh :tangle "~/.zshrc"
      POWERLEVEL9K_COLOR_SCHEME='light'
      POWERLEVEL9K_MODE='nerdfont-complete'
      POWERLEVEL9K_PROMPT_ON_NEWLINE=true
      POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon context dir vcs anaconda)
      POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)
      source  $CONFORG_DIR/contrib/powerlevel9k/powerlevel9k.zsh-theme
    #+END_SRC

*** Taskwarrior
*** Mu4e configs on the Internet

;; I installed mu4e from the 0.9.18 tarball
;; this is where make install put the emacs bits
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")

(require 'mu4e)

;; I want my format=flowed thank you very much
;; mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
;; each paragraph is a single long line; at sending, emacs will add the
;; special line continuation characters.
(setq mu4e-compose-format-flowed t)

;; every new email composition gets its own frame! (window)
(setq mu4e-compose-in-new-frame t)

;; give me ISO(ish) format date-time stamps in the header list
(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)

;; path to our Maildir directory
(setq mu4e-maildir "~/Maildir")

;; the next are relative to `mu4e-maildir'
;; instead of strings, they can be functions too, see
;; their docstring or the chapter 'Dynamic folders'
(setq mu4e-sent-folder   "/Sent"
      mu4e-drafts-folder "/Drafts"
      mu4e-trash-folder  "/Trash")

;; the maildirs you use frequently; access them with 'j' ('jump')
(setq   mu4e-maildir-shortcuts
    '(("/Archive"     . ?a)
      ("/INBOX"       . ?i)
      ("/Sent"        . ?s)))

;; the list of all of my e-mail addresses
(setq mu4e-user-mail-address-list '("me@home.com"
                                    "me@work.com"
                                    "me@org.org"))

;; the headers to show in the headers list -- a pair of a field
;; and its width, with `nil' meaning 'unlimited'
;; (better only use that for the last field.
;; These are the defaults:
(setq mu4e-headers-fields
    '( (:date          .  25)    ;; alternatively, use :human-date
       (:flags         .   6)
       (:from          .  22)
       (:subject       .  nil))) ;; alternatively, use :thread-subject

;; program to get mail; alternatives are 'fetchmail', 'getmail'
;; isync or your own shellscript. called when 'U' is pressed in
;; main view.

;; If you get your mail without an explicit command,
;; use "true" for the command (this is the default)
;; when I press U in the main view, or C-c C-u elsewhere,
;; this command is called, followed by the mu indexer
(setq mu4e-get-mail-command "offlineimap")

;; not using smtp-async yet
;; some of these variables will get overridden by the contexts
(setq
 send-mail-function 'smtpmail-send-it
 message-send-mail-function 'smtpmail-send-it
 smtpmail-smtp-server "smtp.fastmail.com"
 smtpmail-smtp-service 465
 smtpmail-stream-type 'ssl
 )

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; here come the contexts
;; I have about 5 of these, chopped down to 2 for demonstration purposes
;; each context can set any number of variables (see :vars)
;; for example below here I'm using two different SMTP servers depending on identity
(setq mu4e-contexts
      `( ,(make-mu4e-context
           :name "c me@home.com"
           :enter-func (lambda () (mu4e-message "Enter me@home.com context"))
           :leave-func (lambda () (mu4e-message "Leave me@home.com context"))
           ;; we match based on the contact-fields of the message (that we are replying to)
           ;; https://www.djcbsoftware.nl/code/mu/mu4e/What-are-contexts.html#What-are-contexts
           :match-func (lambda (msg)
                         (when msg 
                           (mu4e-message-contact-field-matches msg 
                                                               :to "me@home.com")))
           :vars '( ( user-mail-address      . "me@home.com"  )
                    ( user-full-name         . "Charl P. Botha" )
                    ( smtpmail-smtp-server   . "smtp.fastmail.com" )
                    ( mu4e-compose-signature .
                                             (concat
                                              "dr. charl p. botha\n"
                                              "http://charlbotha.com/\n"))))

         ,(make-mu4e-context
           :name "s me@org.org"
           :enter-func (lambda () (mu4e-message "Enter me@org.org context"))
           ;; no leave-func
           ;; we match based on the contact-fields of the message
           :match-func (lambda (msg)
                         (when msg 
                           (mu4e-message-contact-field-matches msg 
                                                               :to "me@org.org")))
           :vars '( ( user-mail-address       . "me@org.org" )
                    ( user-full-name          . "Charl P. Botha" )
                    ( smtpmail-smtp-server    . "smtp.gmail.com" )
                    ( mu4e-compose-signature  .
                                              (concat
                                               "Dr. Charl P. Botha\n"
                                               "Science Officer :: Stone Three Venture Technology\n"
                                               "https://www.stonethree.com\n"))))         

         ))

;; start with the first (default) context; 
(setq mu4e-context-policy 'pick-first)

;; compose with the current context if no context matches;
(setq mu4e-compose-context-policy nil)

;; these are the standard mu4e search bookmarks
;; I've only added the fourth one to pull up flagged emails in my inbox
;; I sometimes use this to shortlist emails I need to get around to ASAP
(setq mu4e-bookmarks
  `( ,(make-mu4e-bookmark
       :name  "Unread messages"
       :query "flag:unread AND NOT flag:trashed"
       :key ?u)
     ,(make-mu4e-bookmark
       :name "Today's messages"
       :query "date:today..now"
       :key ?t)
     ,(make-mu4e-bookmark
       :name "Last 7 days"
       :query "date:7d..now"
       :key ?w)
     ,(make-mu4e-bookmark
       :name "Flagged in INBOX"
       :query "maildir:\"/INBOX\" and flag:flagged"
       :key ?f)))
*** Another Mu4e
